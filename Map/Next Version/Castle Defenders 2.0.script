const
  MAX_WAVE = 35;                       //Maximum number of AI waves. For now, 35 waves implemented
  BONUS_WAVE = 18;                     //Players get a random bonus with 18th wave
  LATE_BONUS_WAVE = 31;                //Players get late bonus with 31st wave
  BONUS_CHANCE = 0.1375;               //13,75% chance to activate some bonuses
  ROGUE_CHANCE = 0.4;                  //40% chance to get rogue when equipping militia
  KILL_CHANCE = 0.125;                 //12,5% chance to activate Immediate Kill bonus
  RETRIBUTION_CHANCE = 0.115;          //11,5% chance to activate Retribution bonus
  DOUBLE_CHANCE = 0.135;               //13,5% chance to activate Double bonus
  REBORN_CHANCE = 0.225;               //22,5% chance to activate Reborn bonus
  NEWBORN_CHANCE = 0.125;              //12,5% chance to activate Newborn Ally  bonus
  RANGED_CHANCE = 0.175;               //17,5% chance to activate Ranged bonus
  POISON_CHANCE = 0.65;                //65% chance to activate Poisoning bonus
  DROUGHT_CHANCE = 0.65;               //65% chance to activate Drought bonus
  MAX_ARMY_COUNT = 120;                //Maximum army count to activate extra recruits bonus
  RESCUE_RECRUITS_COUNT = 10;          //Maximum recruits count for rescue squad bonus
  RESCUE_ARMY_COUNT = 120;             //Player should have no more than 120 soldiers to use rescue squad bonus
  RESCUE_DELAY = 900;                  //1,5 minutes delay
  LATE_BONUS_DELAY = 1800;             //3 minutes delay
  START_WAVES_DELAY = 1200;            //2 minutes delay
  MID_WAVES_DELAY = 1800;              //3 minutes delay
  LATE_WAVES_DELAY = 2400;             //4 minutes delay
  RESCUES_PER_PLAYER = 3;              //Player can use bonus 3 times
  RESCUE_WAVE = 26;                    //Bonus available since 26th wave
  MAX_RANGED = 150;                    //Maximum ranged count per player
  DEBUG_MODE = False;                  //Debug option, to see how script works
  INDIVIDUAL_BONUSES = False;          //Untested, individual bonuses for 18th wave
  ALLOW_SPLITTING = False;             //Allows making troops of one soldier - OP
  MIN_UNITS_COUNT = 5;                 //Minimum soldiers per group
  LINK_RADIUS = 4;                     //Link alone soldiers within 4 tiles
  AUTOLINK_RADIUS = 6;                 //Link doubled groups within 6 tiles
  STATUS_SHOW_TIME = 150;              //15 seconds
  START_SERFS = 12;                    //12 serfs at start
  RANDOM_FACTOR = 100;                 //Random
  ENABLE_SPLITTING = False;            //Anti-cheat (disables cmowla style abuse)
  SPLIT_CHECK_FACTOR = 15;             //Once per 15 ticks
  MAX_TOWERS = 2;                      //2 towers per player
  DIFFICULTY_FACTOR_NORMAL = 1;        //Difficulty factor for normal mode
  DIFFICULTY_FACTOR_EASY = 0.8;        //Difficulty factor for easy mode
  DIFFICULTY_FACTOR_HARD = 1.2;        //Difficulty factor for hard mode
  LANCE_POINTS = 50;                   //50 on normal difficulty lvl
  AXE_POINTS = 100;                    //100 on normal difficulty lvl
  BOW_POINTS = 160;                    //160 on normal difficulty lvl
  CROSSBOW_POINTS = 250;               //250 on normal difficulty lvl
  SCOUT_POINTS = 500;                  //500 on normal difficulty lvl
  PIKE_POINTS = 400;                   //400 on normal difficulty lvl
  SWORD_POINTS = 700;                  //700 on normal difficulty lvl
  BARB_POINTS = 1000;                  //1000 on normal difficulty lvl
  KNIGHT_POINTS = 1250;                //1250 on normal difficulty lvl
  ARMY_UNLOCK_FACTOR = 0.9;            //x0.9 multiplier, for balance
  AUTOFEED_TIME = 6000;                //every 10 min
  SHOW_MAP_VERSION = False;            //False by default, true in debug mode
  MAP_VERSION = '[$CD9B4B]3.0 RC1[]';  //Map version


type
  TileInfoRec = Record
    TilePosX: Integer;
    TilePosY: Integer;
    TileHeight: Integer;
    TileObject: Integer;
    TileRotation: Integer;
    TileType: Integer;
    IsStone: Boolean;
    IsWater: Boolean;
    WaterDirection: Integer;
  end;


type
  LateBonus = (lbWall, lbMoat, lbPoison, lbDrought);


var
  Scores, Barracks, SpawnX, SpawnY, RescueTileX, RescueTileY, RescuesCount, RescuesDelay, RescueArmy, RescueRecruits, Direction: array[0..3] of Integer;
  RescueColor: array[0..3] of ANSIString;
  LateBonusHeaderName: array[0..2] of ANSIString;
  RescueSquadPositionX, RescueSquadPositionY, RescueSquadFormation: array[0..3] of array[0..4] of Integer;
  I, K, Wave, General, WaveTime, AIBarracks, AIGroup, LateBonusDelay: Integer;
  Unlocked: array[0..3] of array[15..23] of Boolean;
  bImmediateKill, bDouble, bNewConscription, bRetribution,
  bReinforce, bReborn, bNewborn, Check, bMsg, bRescueMsg, bRanged, LateBonusCheck: Boolean;
  RallyPointX, RallyPointY, AttackPointX, AttackPointY: array[4..7] of Integer;
  AISpawnX, AISpawnY: array[0..2] of array[4..7] of Integer;
  TileInfo: array[41..110] of array[41..110] of TileInfoRec;
  ShowStatusStart: array[0..3] of Integer;
  StatusString: array[0..3] of ANSIString;
  GroupRandomType: array[0..RANDOM_FACTOR - 1] of Integer;
  Q: Integer;
  SortedPlayers, ActivePlayers: array of Integer;


function DifficultyFactor: Single;
begin
  case States.MissionDifficulty of
    mdEasy1:  Result := DIFFICULTY_FACTOR_EASY;
    mdNormal: Result := DIFFICULTY_FACTOR_NORMAL;
    mdHard1:  Result := DIFFICULTY_FACTOR_HARD
    else      Result := DIFFICULTY_FACTOR_NORMAL;
  end;
end;


function ArmyFactor: Single;
begin
  case States.MissionDifficulty of
    mdNormal: Result := 1
    else      Result := ARMY_UNLOCK_FACTOR;
  end;
end;


procedure AutoFeed(P: Integer);
var
  K: Integer;
  UnitsToFeed: array of Integer;
begin
  UnitsToFeed := States.PlayerGetAllUnits(P);
  if Length(UnitsToFeed) <= 0 then
    Exit;
  for K := Low(UnitsToFeed) to High(UnitsToFeed) do
    if States.UnitHunger(UnitsToFeed[K]) > 400 then
      Actions.UnitHungerSet(UnitsToFeed[K], States.UnitMaxHunger);
end;


function RandomObject: Integer;
begin
  case States.KaMRandomI(100) of
    0..39:  Result := 8;
    40..69: Result := 60;
    70..84: Result := 21;
    85..99: Result := 220;
  end;
end;


function LateBonusName(X, Y: Integer): ANSIString;
begin
  case States.MapTileObject(X, Y) of
    8:   Result := '<$62>';
    60:  Result := '<$63>';
    21:  Result := '<$64>';
    220: Result := '<$65>'
    else Result := '';
  end;
end;


function LateBonusDescription(X, Y: Integer): ANSIString;
begin
  case States.MapTileObject(X, Y) of
    8:   Result := '<$66>';
    60:  Result := '<$67>';
    21:  Result := '<$68>';
    220: Result := '<$69>'
    else Result := '';
  end;
end;


function LateBonusHeaderColor(X, Y: Integer): ANSIString;
begin
  if Utils.InRangeI(States.MapTileObject(X, Y), 8, 220) then
    Result := '00FF00'
  else
    Result := '0000FF';
end;


procedure SaveTileInfo;
var
  X, Y: Integer;
begin
  for X := 41 to 110 do
  for Y := 41 to 110 do
  begin
    TileInfo[X][Y].TilePosX := X;
    TileInfo[X][Y].TilePosY := Y;
    TileInfo[X][Y].TileHeight := States.MapTileHeight(X, Y);
    TileInfo[X][Y].TileObject := States.MapTileObject(X, Y);
    TileInfo[X][Y].TileRotation := States.MapTileRotation(X, Y);
    TileInfo[X][Y].TileType := States.MapTileType(X, Y);
    TileInfo[X][Y].IsWater := False;
    TileInfo[X][Y].IsStone := False;
    TileInfo[X][Y].WaterDirection := -1;
  end;
end;


procedure RegenTile(X, Y: Integer);
begin
  Actions.MapTileHeightSet(X, Y, TileInfo[X][Y].TileHeight);
  Actions.MapTileObjectSet(X, Y, TileInfo[X][Y].TileObject);
  Actions.MapTileSet(X, Y, TileInfo[X][Y].TileType, TileInfo[X][Y].TileRotation);
  TileInfo[X][Y].IsWater := False;
  TileInfo[X][Y].IsStone := False;
  TileInfo[X][Y].WaterDirection := -1;
end;


procedure ReCheckTiles;
var
  U, X, Y: Integer;
begin

  for X := 41 to 110 do
  for Y := 41 to 110 do
  begin

    if (TileInfo[X][Y].IsStone)
    and (States.MapTileObject(X, Y) <> 8) then
    begin
      U := States.UnitAt(X, Y);
      if U <> -1 then
        Actions.UnitKill(U, True);
      Actions.MapTileObjectSet(X, Y, 8);
    end;

    if (TileInfo[X][Y].IsWater)
    and (States.MapTileType(X, Y) <> 208) then
    begin
      U := States.UnitAt(X, Y);
      if U <> -1 then
        Actions.UnitKill(U, True);
      Actions.MapTileSet(X, Y, 208, TileInfo[X][Y].WaterDirection);
    end;

  end;

end;


procedure UseLateBonus(aBonus: LateBonus; aPlayer: Integer);
var
  EnemySoldiers, AllySoldiers: array of Integer;
  X, Y, U: Integer;
  Entrance: array[0..3] of Integer;
begin
  for I := 0 to 3 do
    Entrance[I] := States.KaMRandomI(3);

  case aBonus of

    lbWall: begin

              ShowStatusStart[aPlayer] := States.GameTime;
              StatusString[aPlayer] := '[$B670AD]<--- <$87>![]'

              for X := 79 to 81 do
              begin
                U := States.UnitAt(X, 80);
                if U <> -1 then
                  Actions.UnitKill(U, True);
                Actions.MapTileObjectSet(X, 80, 8);
                TileInfo[X][80].IsStone := True;
              end;

              for Y := 75 to 80 do
              begin
                U := States.UnitAt(81, Y);
                if U <> -1 then
                  Actions.UnitKill(U, True);
                Actions.MapTileObjectSet(81, Y, 8);
                TileInfo[81][Y].IsStone := True;
              end;

            end;

    lbMoat: begin

              ShowStatusStart[aPlayer] := States.GameTime;
              StatusString[aPlayer] := '[$B670AD]<--- <$88>![]'

              case Entrance[0] of

                0: for X := 56 to 59 do
                   for Y := 47 to 51 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(X, 47, 39, 0);
                     Actions.MapTileSet(X, 51, 39, 2);
                     Actions.MapTileSet(X, 48, 106, 0);
                     Actions.MapTileSet(X, 50, 106, 2);
                     Actions.MapTileSet(X, 49, 208, 3);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[X][49].IsWater := True;
                     TileInfo[X][49].WaterDirection := 3;
                   end;

                1: for X := 73 to 78 do
                   for Y := 47 to 51 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(X, 47, 39, 0);
                     Actions.MapTileSet(X, 51, 39, 2);
                     Actions.MapTileSet(X, 48, 106, 0);
                     Actions.MapTileSet(X, 50, 106, 2);
                     Actions.MapTileSet(X, 49, 208, 3);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[X][49].IsWater := True;
                     TileInfo[X][49].WaterDirection := 3;
                   end;

                2: for X := 92 to 95 do
                   for Y := 47 to 51 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(X, 47, 39, 0);
                     Actions.MapTileSet(X, 51, 39, 2);
                     Actions.MapTileSet(X, 48, 106, 0);
                     Actions.MapTileSet(X, 50, 106, 2);
                     Actions.MapTileSet(X, 49, 208, 3);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[X][49].IsWater := True;
                     TileInfo[X][49].WaterDirection := 3;
                   end;
              end;

              case Entrance[1] of

                0: for X := 100 to 104 do
                   for Y := 56 to 59 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(100, Y, 39, 3);
                     Actions.MapTileSet(104, Y, 39, 1);
                     Actions.MapTileSet(101, Y, 106, 3);
                     Actions.MapTileSet(103, Y, 106, 1);
                     Actions.MapTileSet(102, Y, 208, 2);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[102][Y].IsWater := True;
                     TileInfo[102][Y].WaterDirection := 2;
                   end;

                1: for X := 100 to 104 do
                   for Y := 56 to 59 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(100, Y, 39, 3);
                     Actions.MapTileSet(104, Y, 39, 1);
                     Actions.MapTileSet(101, Y, 106, 3);
                     Actions.MapTileSet(103, Y, 106, 1);
                     Actions.MapTileSet(102, Y, 208, 2);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[102][Y].IsWater := True;
                     TileInfo[102][Y].WaterDirection := 2;
                   end;

                2: for X := 100 to 104 do
                   for Y := 56 to 59 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(100, Y, 39, 3);
                     Actions.MapTileSet(104, Y, 39, 1);
                     Actions.MapTileSet(101, Y, 106, 3);
                     Actions.MapTileSet(103, Y, 106, 1);
                     Actions.MapTileSet(102, Y, 208, 2);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[102][Y].IsWater := True;
                     TileInfo[102][Y].WaterDirection := 2;
                   end;
              end;

              case Entrance[2] of

                0: for X := 56 to 59 do
                   for Y := 100 to 104 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(X, 100, 39, 0);
                     Actions.MapTileSet(X, 104, 39, 2);
                     Actions.MapTileSet(X, 101, 106, 0);
                     Actions.MapTileSet(X, 103, 106, 2);
                     Actions.MapTileSet(X, 102, 208, 1);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[X][102].IsWater := True;
                     TileInfo[X][102].WaterDirection := 1;
                   end;

                1: for X := 73 to 78 do
                   for Y := 100 to 104 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(X, 100, 39, 0);
                     Actions.MapTileSet(X, 104, 39, 2);
                     Actions.MapTileSet(X, 101, 106, 0);
                     Actions.MapTileSet(X, 103, 106, 2);
                     Actions.MapTileSet(X, 102, 208, 1);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[X][102].IsWater := True;
                     TileInfo[X][102].WaterDirection := 1;
                   end;

                2: for X := 92 to 95 do
                   for Y := 100 to 104 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(X, 100, 39, 0);
                     Actions.MapTileSet(X, 104, 39, 2);
                     Actions.MapTileSet(X, 101, 106, 0);
                     Actions.MapTileSet(X, 103, 106, 2);
                     Actions.MapTileSet(X, 102, 208, 1);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[X][102].IsWater := True;
                     TileInfo[X][102].WaterDirection := 1;
                   end;
              end;

              case Entrance[3] of

                0: for X := 47 to 51 do
                   for Y := 56 to 59 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(47, Y, 39, 3);
                     Actions.MapTileSet(51, Y, 39, 1);
                     Actions.MapTileSet(48, Y, 106, 3);
                     Actions.MapTileSet(50, Y, 106, 1);
                     Actions.MapTileSet(49, Y, 208, 0);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[49][Y].IsWater := True;
                     TileInfo[49][Y].WaterDirection := 0;
                   end;

                1: for X := 47 to 51 do
                   for Y := 56 to 59 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(47, Y, 39, 3);
                     Actions.MapTileSet(51, Y, 39, 1);
                     Actions.MapTileSet(48, Y, 106, 3);
                     Actions.MapTileSet(50, Y, 106, 1);
                     Actions.MapTileSet(49, Y, 208, 0);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[49][Y].IsWater := True;
                     TileInfo[49][Y].WaterDirection := 0;
                   end;

                2: for X := 48 to 51 do
                   for Y := 56 to 59 do
                   begin
                     U := States.UnitAt(X, Y);
                     if U <> -1 then
                       Actions.UnitKill(U, True);
                     Actions.MapTileSet(47, Y, 39, 3);
                     Actions.MapTileSet(51, Y, 39, 1);
                     Actions.MapTileSet(48, Y, 106, 3);
                     Actions.MapTileSet(50, Y, 106, 1);
                     Actions.MapTileSet(49, Y, 208, 0);
                     Actions.MapTileObjectSet(X, Y, 255);
                     TileInfo[49][Y].IsWater := True;
                     TileInfo[49][Y].WaterDirection := 0;
                   end;
              end;
            end;

    lbPoison:  begin

                 ShowStatusStart[aPlayer] := States.GameTime;

                 StatusString[aPlayer] := '[$B670AD]<--- <$89>![]'

                 for I := 4 to 7 do
                 begin
                   if States.PlayerEnabled(I) then
                     EnemySoldiers := States.PlayerGetAllUnits(I);
                   for K := 0 to length(EnemySoldiers) - 1 do
                     if States.KaMRandom < (POISON_CHANCE / DifficultyFactor) then
                     begin
                       Actions.UnitKill(EnemySoldiers[K], False);
                       Scores[aPlayer] := Scores[aPlayer] + 1;
                     end;
                 end;

                 for I := 0 to 3 do
                 begin
                   if States.PlayerEnabled(I) then
                     AllySoldiers := States.PlayerGetAllUnits(I);
                   for K := 0 to length(AllySoldiers) - 1 do
                     if States.KaMRandom < (POISON_CHANCE/15) then
                       if Utils.InRangeI(States.UnitType(AllySoldiers[K]), 14, 27) then
                         Actions.UnitKill(AllySoldiers[K], False);
                 end;
               end;

    lbDrought: begin

                 ShowStatusStart[aPlayer] := States.GameTime;

                 StatusString[aPlayer] := '[$B670AD]<--- <$90>![]'

                 for I := 4 to 7 do
                 begin
                   if States.PlayerEnabled(I) then
                     EnemySoldiers := States.PlayerGetAllUnits(I);
                   for K := 0 to length(EnemySoldiers) - 1 do
                     if States.KaMRandom < (DROUGHT_CHANCE / DifficultyFactor) then
                     begin
                       Actions.UnitHungerSet(EnemySoldiers[K], 400);
                       Scores[aPlayer] := Scores[aPlayer] + 1;
                     end;
                 end;

                 for I := 0 to 3 do
                 begin
                   if States.PlayerEnabled(I) then
                     AllySoldiers := States.PlayerGetAllUnits(I);
                   for K := 0 to length(AllySoldiers) - 1 do
                     if States.KaMRandom < (DROUGHT_CHANCE/15) then
                       if Utils.InRangeI(States.UnitType(AllySoldiers[K]), 14, 27) then
                         Actions.UnitHungerSet(AllySoldiers[K], 800);
                 end;
               end;
  end;
end;


procedure CheckDebugBonus;
begin
  if Wave = 18 then
    bImmediateKill := True;

  if Wave = 21 then
  begin
    bImmediateKill := False;
    bDouble := True;
  end;

  if Wave = 24 then
  begin
    bDouble := False;
    bNewConscription := True;
  end;

  if Wave = 27 then
  begin
    bNewConscription := False;
    bReinforce := True;
  end;

  if Wave = 29 then
  begin
    bReinforce := False;
    bReborn := True;
  end;

  if Wave = 31 then
  begin
    bReborn := False;
    bNewborn := True;
  end;

  if Wave = 33 then
  begin
    bNewborn := False;
    bRetribution := True;
  end;
end;


procedure CheckIdleGroups;
var
  Groups: array of Integer;
begin
  for K := 4 to 7 do
  begin
    Groups := States.PlayerGetAllGroups(K);
    for I := 0 to length(Groups) - 1 do
      if States.GroupIdle(Groups[I]) then
        Actions.GroupOrderWalk(Groups[I], AttackPointX[States.GroupOwner(Groups[I])], AttackPointY[States.GroupOwner(Groups[I])], States.KaMRandomI(8));
  end;
end;


function TotalArmyCount: Integer;
begin
  Result := 0;
  for I := 0 to 3 do
    if States.PlayerEnabled(I) then
      Result := Result + States.StatArmyCount(I);
end;


function DebugHeader: ANSIString;
var
  Info, State, Splitting: ANSIString;
begin
  if Utils.InRangeI(Wave, 1, 21) then
    State := 'S';
  if Utils.InRangeI(Wave, 22, 27) then
    State := 'M';
  if Utils.InRangeI(Wave, 28, 35) then
    State := 'L';

  if not ENABLE_SPLITTING then
    Splitting := 'Disabled'
  else
    Splitting := 'Enabled';
   
  Info := 'Mode: Test; State: ' + State + ';  Enemies: ' 
  + IntToStr(States.StatArmyCount(4) + States.StatArmyCount(5) + States.StatArmyCount(6) + States.StatArmyCount(7)) + '; Allies: ' 
  + IntToStr(TotalArmyCount) + '; Splitting: ' + Splitting +  
  '; Late Bonus Chance: 0,' + InttoStr(States.KaMRandomI(20) + 50) + IntToStr(States.KaMRandomI(100));

  Result := 'WARNING! DEBUG MODE IS ON!|' + Info + '||';

  if not DEBUG_MODE then
    Result := ''

  else
  begin

    if bImmediateKill then
      Result := 'DEBUG MODE ON! You now test bonus: Immediate Kill|' + Info + '||';

    if bDouble then
      Result := 'DEBUG MODE ON! You now test bonus: Double|' + Info + '||';

    if bNewConscription then
      Result := 'DEBUG MODE ON! You now test bonus: New Conscription|' + Info + '||';

    if bReinforce then
      Result := 'DEBUG MODE ON! You now test bonus: Reinforcement|' + Info + '||';

    if bReborn then
      Result := 'DEBUG MODE ON! You now test bonus: Reborn|' + Info + '||';

    if bNewborn then
      Result := 'DEBUG MODE ON! You now test bonus: Newborn Ally|' + Info + '||';

    if bRetribution then
      Result := 'DEBUG MODE ON! You now test bonus: Retribution|' + Info + '||';

  end;
end;


procedure GetInitialAttack;
var
  AIGroup: Integer;
begin

  AIGroup := States.GroupAt(41, 21);
  Actions.GroupOrderWalk(AIGroup, 58, 54, 4);

  AIGroup := States.GroupAt(112, 22);
  Actions.GroupOrderWalk(AIGroup, 93, 54, 4);

  AIGroup := States.GroupAt(135, 38);
  Actions.GroupOrderWalk(AIGroup, 97, 58, 6);

  AIGroup := States.GroupAt(132, 112);
  Actions.GroupOrderWalk(AIGroup, 98, 94, 6);

  AIGroup := States.GroupAt(113, 127);
  Actions.GroupOrderWalk(AIGroup, 94, 97, 0);

  AIGroup := States.GroupAt(37, 126);
  Actions.GroupOrderWalk(AIGroup, 58, 97, 0);

  AIGroup := States.GroupAt(16, 112);
  Actions.GroupOrderWalk(AIGroup, 52, 93, 2);

  AIGroup := States.GroupAt(13, 39);
  Actions.GroupOrderWalk(AIGroup, 53, 57, 2);

end;


procedure OnMissionStart;
var
  Houses: array of Integer;
begin
  for I := 0 to 8 do
    if States.PlayerEnabled(I) then
      AutoFeed(I); 

  GetInitialAttack;

  SaveTileInfo;

  if not ENABLE_SPLITTING then
    Q := 1 + States.KaMRandomI(3) * Byte(States.MissionDifficulty = mdHard1)
  else
    Q := 0;

  for I := 0 to 3 do
    if States.PlayerEnabled(I) then
    begin
      SetLength(ActivePlayers, Length(ActivePlayers) + 1);
      ActivePlayers[Length(ActivePlayers) - 1] := I;
      SetLength(SortedPlayers, Length(SortedPlayers) + 1);
      SortedPlayers[Length(SortedPlayers) - 1] := I;
    end;

  Wave := 1;
  WaveTime := 1200;
  General := States.UnitAt(75, 77);
  AIBarracks := States.HouseAt(75, 76);

  Barracks[0] := States.HouseAt(63, 71);
  Barracks[1] := States.HouseAt(63, 80);
  Barracks[2] := States.HouseAt(88, 80);
  Barracks[3] := States.HouseAt(88, 71);

  SpawnX[0] := 46;
  SpawnX[1] := 46;
  SpawnX[2] := 105;
  SpawnX[3] := 105;
  SpawnY[0] := 46;
  SpawnY[1] := 105;
  SpawnY[2] := 105;
  SpawnY[3] := 46;

  RescueTileX[0] := 46;
  RescueTileX[1] := 46;
  RescueTileX[2] := 105;
  RescueTileX[3] := 105;
  RescueTileY[0] := 46;
  RescueTileY[1] := 105;
  RescueTileY[2] := 105;
  RescueTileY[3] := 46;

  Direction[0] := 4;
  Direction[1] := 0;
  Direction[2] := 0;
  Direction[3] := 4;

  RescueSquadPositionX[0][0] := 44;
  RescueSquadPositionX[0][1] := 44;
  RescueSquadPositionX[0][2] := 48;
  RescueSquadPositionX[0][3] := 52;
  RescueSquadPositionX[0][4] := 49;

  RescueSquadPositionX[1][0] := 44;
  RescueSquadPositionX[1][1] := 44;
  RescueSquadPositionX[1][2] := 49;
  RescueSquadPositionX[1][3] := 49;
  RescueSquadPositionX[1][4] := 52;

  RescueSquadPositionX[2][0] := 107;
  RescueSquadPositionX[2][1] := 107;
  RescueSquadPositionX[2][2] := 103;
  RescueSquadPositionX[2][3] := 102;
  RescueSquadPositionX[2][4] := 99;

  RescueSquadPositionX[3][0] := 107;
  RescueSquadPositionX[3][1] := 107;
  RescueSquadPositionX[3][2] := 102;
  RescueSquadPositionX[3][3] := 99;
  RescueSquadPositionX[3][4] := 102;

  RescueSquadPositionY[0][0] := 45;
  RescueSquadPositionY[0][1] := 50;
  RescueSquadPositionY[0][2] := 46;
  RescueSquadPositionY[0][3] := 50;
  RescueSquadPositionY[0][4] := 54;

  RescueSquadPositionY[1][0] := 101;
  RescueSquadPositionY[1][1] := 106;
  RescueSquadPositionY[1][2] := 105;
  RescueSquadPositionY[1][3] := 97;
  RescueSquadPositionY[1][4] := 101;

  RescueSquadPositionY[2][0] := 101;
  RescueSquadPositionY[2][1] := 106;
  RescueSquadPositionY[2][2] := 105;
  RescueSquadPositionY[2][3] := 97;
  RescueSquadPositionY[2][4] := 101;

  RescueSquadPositionY[3][0] := 45;
  RescueSquadPositionY[3][1] := 50;
  RescueSquadPositionY[3][2] := 46;
  RescueSquadPositionY[3][3] := 50;
  RescueSquadPositionY[3][4] := 54;

  RescueSquadFormation[0][0] := 5;
  RescueSquadFormation[0][1] := 5;
  RescueSquadFormation[0][2] := 4;
  RescueSquadFormation[0][3] := 5;
  RescueSquadFormation[0][4] := 5;

  RescueSquadFormation[1][0] := 5;
  RescueSquadFormation[1][1] := 5;
  RescueSquadFormation[1][2] := 4;
  RescueSquadFormation[1][3] := 5;
  RescueSquadFormation[1][4] := 5;
 
  RescueSquadFormation[2][0] := 5;
  RescueSquadFormation[2][1] := 5;
  RescueSquadFormation[2][2] := 4;
  RescueSquadFormation[2][3] := 5;
  RescueSquadFormation[2][4] := 5;

  RescueSquadFormation[3][0] := 5;
  RescueSquadFormation[3][1] := 5;
  RescueSquadFormation[3][2] := 4;
  RescueSquadFormation[3][3] := 5;
  RescueSquadFormation[3][4] := 5;

  RallyPointX[4] := 75;
  RallyPointX[5] := 130;
  RallyPointX[6] := 75;
  RallyPointX[7] := 20;
  RallyPointY[4] := 20;
  RallyPointY[5] := 75;
  RallyPointY[6] := 130;
  RallyPointY[7] := 75;

  AttackPointX[4] := 75;
  AttackPointX[5] := 95;
  AttackPointX[6] := 75;
  AttackPointX[7] := 55;
  AttackPointY[4] := 55;
  AttackPointY[5] := 75;
  AttackPointY[6] := 95;
  AttackPointY[7] := 75;

  AISpawnX[0][4] := 65;
  AISpawnX[1][4] := 75;
  AISpawnX[2][4] := 85;

  AISpawnY[0][4] := 10;
  AISpawnY[1][4] := 10;
  AISpawnY[2][4] := 10;

  AISpawnX[0][5] := 140;
  AISpawnX[1][5] := 140;
  AISpawnX[2][5] := 140;

  AISpawnY[0][5] := 65;
  AISpawnY[1][5] := 75;
  AISpawnY[2][5] := 85;

  AISpawnX[0][6] := 65;
  AISpawnX[1][6] := 75;
  AISpawnX[2][6] := 85;

  AISpawnY[0][6] := 140;
  AISpawnY[1][6] := 140;
  AISpawnY[2][6] := 140;

  AISpawnX[0][7] := 10;
  AISpawnX[1][7] := 10;
  AISpawnX[2][7] := 10;

  AISpawnY[0][7] := 65;
  AISpawnY[1][7] := 75;
  AISpawnY[2][7] := 85;

  bImmediateKill := False;
  bDouble := False;
  bNewConscription := False; 
  bReinforce := False;
  bReborn := False;
  bNewborn := False;
  bRetribution := False;
  Check := False;
  bMsg := False;
  bRescueMsg := False;
  bRanged := False;
  LateBonusDelay := 0;
  LateBonusCheck := False;

  for I := 0 to 3 do
  for K := 0 to 3 do
    if (States.PlayerEnabled(I))
    and (States.PlayerEnabled(K))
    and (I <> K) then 
    begin
      Actions.PlayerAllianceChange(I, K, True, True);
      Actions.PlayerAllianceChange(K, I, True, True);
    end;

  for I := 0 to 3 do
    if States.PlayerEnabled(I) then 
    begin
      ShowStatusStart[I] := 0;
      StatusString[I] := '';
      RescuesCount[I] := RESCUES_PER_PLAYER;
      RescuesDelay[I] := 0;
      RescueArmy[I] := Utils.RoundToUp(RESCUE_ARMY_COUNT / DifficultyFactor, 20);
      RescueRecruits[I] := Utils.RoundToUp(RESCUE_RECRUITS_COUNT / DifficultyFactor, 5);
      Scores[I] := 0;
      Houses := States.PlayerGetAllHouses(I);
      for K := 0 to Length(Houses) - 1 do
        if States.HouseType(Houses[K]) = 13 then
          Actions.HouseSchoolQueueAdd(Houses[K], 13, 1);
    end;

    for I := 0 to 3 do
    for K := 15 to 23 do    
      if States.PlayerEnabled(I) then
      begin
        Actions.UnitBlock(I, K, True);
        Unlocked[I][K] := False;
    end;
end;


procedure CheckBonus;
begin
  case States.KaMRandomI(160) of

    0..19: begin
             bImmediateKill := True;
             if not bMsg then
             begin
               Actions.ShowMsg(-1, '<$6> ' + '<$7>: ' + '<$13>');
               bMsg := True;
             end;
           end;

    20..39: begin
              bDouble := True;
              if not bMsg then
              begin
                Actions.ShowMsg(-1, '<$6> ' + '<$8>: ' + '<$14>');
                bMsg := True;
              end;
            end;

    40..59: begin
              bNewConscription := True;
              if not bMsg then
              begin
                Actions.ShowMsg(-1, '<$6> ' + '<$9>: ' + '<$15>');
                bMsg := True;
              end;
            end;

    60..79: begin
              bReinforce := True;
              if not bMsg then
              begin
                Actions.ShowMsg(-1, '<$6> ' + '<$10>: ' + '<$16>');
                bMsg := True;
              end;
            end;

    80..99: begin
              bReborn := True;
              if not bMsg then
              begin
                Actions.ShowMsg(-1, '<$6> ' + '<$11>: ' + '<$17>');
                bMsg := True;
              end;
            end;

    100..119: begin
                bNewborn := True;
                if not bMsg then
                begin
                  Actions.ShowMsg(-1, '<$6> ' + '<$12>: ' + '<$18>');
                  bMsg := True;
                end;
              end;

    120..139: begin
                bRanged := True;
                if not bMsg then
                begin
                  Actions.ShowMsg(-1, '<$6> ' + '<$52>: ' + '<$53>');
                  bMsg := True;
                end;
            end;

    140..159: begin
                bRetribution := True;
                if not bMsg then
                begin
                  Actions.ShowMsg(-1, '<$6> ' + '<$59>: ' + '<$60>');
                  bMsg := True;
                end;
            end;

  end;
end;


procedure AddRecruits;
begin
  for I := 0 to 3 do
    if (States.PlayerEnabled(I))
    and ((not States.HouseDestroyed(Barracks[I]))
    or (Barracks[I] <> -1)) then
    begin
      for K := 0 to 7 do
        Actions.HouseBarracksGiveRecruit(Barracks[I]);
      if States.KaMRandom < (BONUS_CHANCE / DifficultyFactor) then
        for K := 0 to 3 do
          Actions.HouseBarracksGiveRecruit(Barracks[I]);
    end;
end;


procedure AddRecruits10;
begin
  for I := 0 to 3 do
    if (States.PlayerEnabled(I))
    and ((not States.HouseDestroyed(Barracks[I]))
    or (Barracks[I] <> -1)) then
      for K := 0 to 9 do
        Actions.HouseBarracksGiveRecruit(Barracks[I]);
end;


function Delay: Integer;
begin
  if (Utils.InRangeI(States.GameTime, 0, 25199)) then
    Result := START_WAVES_DELAY;
  if (Utils.InRangeI(States.GameTime, 25200, 35999)) then
    Result := MID_WAVES_DELAY;
  if (Utils.InRangeI(States.GameTime, 36000, 52799)) then
    Result := LATE_WAVES_DELAY;
  if Wave = MAX_WAVE then
    Result := 0;
end;


function WaveName: AnsiString;
begin
  case Wave of
    1:   Result := '<$19>';
    2:   Result := '<$20>';
    3:   Result := '<$21>';
    4:   Result := '<$22>';
    5:   Result := '<$23>';
    6:   Result := '<$24>';
    7:   Result := '<$25>';
    8:   Result := '<$26>';
    9:   Result := '<$27>';
    10:  Result := '<$28>';
    11:  Result := '<$29>';
    12:  Result := '<$30>';
    13:  Result := '<$31>';
    14:  Result := '<$32>';
    15:  Result := '<$33>';
    16:  Result := '<$36>';
    17:  Result := '<$35>';
    18:  Result := '<$34>';
    19:  Result := '<$37>';
    20:  Result := '<$38>';
    21:  Result := '<$39>';
    22:  Result := '<$40>';
    23:  Result := '<$54>';
    24:  Result := '<$55>';
    25:  Result := '<$42>';
    26:  Result := '<$43>';
    27:  Result := '<$44>';
    28:  Result := '<$45>';
    29:  Result := '<$46>';
    30:  Result := '<$47>';
    31:  Result := '<$48>';
    32:  Result := '<$82>';
    33:  Result := '<$56>';
    34:  Result := '<$57>';
    35:  Result := '<$58>'
    else Result := '';
  end;
end;


function HasHouses(aPlayer: Integer): Boolean;
begin
  if States.PlayerEnabled(aPlayer) then
    Result := Length(States.PlayerGetAllHouses(aPlayer)) > 0
  else
    Result := False;
end;


function HasUnits(aPlayer: Integer): Boolean;
begin
  if States.PlayerEnabled(aPlayer) then
    Result := Length(States.PlayerGetAllUnits(aPlayer)) > 0
  else
    Result := False;
end;


procedure GetTimer;
begin
  if WaveTime > 0 then
    WaveTime := WaveTime - 1;
end;


procedure OnUnitTrained(aUnitID: Integer);
var
  SchoolHouse: Integer;
begin
  Actions.UnitHungerSet(aUnitID, States.UnitMaxHunger);
  SchoolHouse := States.HouseAt(States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID) - 1);
  if SchoolHouse <> - 1 then
    if States.HouseSchoolQueue(SchoolHouse, 5) = - 1 then
      Actions.HouseSchoolQueueAdd(SchoolHouse, 13, 1);

  if (States.UnitType(aUnitID) = 13) then
    if States.KaMRandom < (0.1 + 0.1 * Byte(bNewConscription)) then
      Actions.GiveUnit(States.UnitOwner(aUnitID), 13, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID) + 1, 5);

end;


procedure ContinueAttack;
var
  Groups: array of Integer;
  X, Y, Player: Integer;
begin
  for I := 4 to 7 do
  begin
    Groups := States.PlayerGetAllGroups(I);

    for K := 0 to Length(Groups) - 1 do
      if (Groups[K] <> -1)
      and (States.GroupMember(Groups[K], 0) <> -1) then
        if (Utils.InRangeI(States.UnitPositionX(States.GroupMember(Groups[K], 0)), 52, 99))
        and (Utils.InRangeI(States.UnitPositionY(States.GroupMember(Groups[K], 0)), 52, 99)) then
        begin
          X := States.UnitPositionX(States.GroupMember(Groups[K], 0));
          Y := States.UnitPositionY(States.GroupMember(Groups[K], 0));
          Player := States.KaMRandomI(4);
          if HasHouses(Player) then
            Actions.GroupOrderAttackHouse(Groups[K], States.ClosestHouseMultipleTypes(Player, X, Y, [11, 13, 17, 21, 27]));
          if States.KaMRandom > (0.9 * DifficultyFactor) then
            if ((not States.UnitDead(General)) or (General <> -1)) then
              Actions.GroupOrderAttackUnit(Groups[K], General);
          if States.KaMRandom < 0.1 then
            if HasUnits(Player) then
              Actions.GroupOrderAttackUnit(Groups[K], States.ClosestUnitMultipleTypes(Player, X, Y, [0, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));
          if States.KaMRandomI(10) = 5 then
            if ((not States.HouseDestroyed(AIBarracks)) or (AIBarracks <> -1)) then
              Actions.GroupOrderAttackHouse(Groups[K], AIBarracks);
        end;
  end;
end;


procedure AttackCenter;
var
  Groups: array of Integer;
  K: Integer;
begin
  Groups := States.PlayerGetAllGroups(4);
  for K := 0 to length(Groups) - 1 do
    if (Groups[K] <> -1)
    and (States.GroupMember(Groups[K], 0) <> -1) then
      if (Utils.InRangeI(States.UnitPositionX(States.GroupMember(Groups[K], 0)), RallyPointX[4] - 1, RallyPointX[4] + 1))
      and (Utils.InRangeI(States.UnitPositionY(States.GroupMember(Groups[K], 0)), RallyPointY[4] - 1, RallyPointY[4] + 1)) then
        Actions.GroupOrderWalk(Groups[K], AttackPointX[4], AttackPointY[4], 4);

  Groups := States.PlayerGetAllGroups(5);
  for K := 0 to length(Groups) - 1 do
    if (Groups[K] <> -1)
    and (States.GroupMember(Groups[K], 0) <> -1) then
      if (Utils.InRangeI(States.UnitPositionX(States.GroupMember(Groups[K], 0)), RallyPointX[5] - 1, RallyPointX[5] + 1))
      and (Utils.InRangeI(States.UnitPositionY(States.GroupMember(Groups[K], 0)), RallyPointY[5] - 1, RallyPointY[5] + 1)) then
        Actions.GroupOrderWalk(Groups[K], AttackPointX[5], AttackPointY[5], 6);

  Groups := States.PlayerGetAllGroups(6);
  for K := 0 to length(Groups) - 1 do
    if (Groups[K] <> -1)
    and (States.GroupMember(Groups[K], 0) <> -1) then
      if (Utils.InRangeI(States.UnitPositionX(States.GroupMember(Groups[K], 0)), RallyPointX[6] - 1, RallyPointX[6] + 1))
      and (Utils.InRangeI(States.UnitPositionY(States.GroupMember(Groups[K], 0)), RallyPointY[6] - 1, RallyPointY[6] + 1)) then
        Actions.GroupOrderWalk(Groups[K], AttackPointX[6], AttackPointY[6], 0);

  Groups := States.PlayerGetAllGroups(7);
  for K := 0 to length(Groups) - 1 do
    if (Groups[K] <> -1)
    and (States.GroupMember(Groups[K], 0) <> -1) then
      if (Utils.InRangeI(States.UnitPositionX(States.GroupMember(Groups[K], 0)), RallyPointX[7] - 1, RallyPointX[7] + 1))
      and (Utils.InRangeI(States.UnitPositionY(States.GroupMember(Groups[K], 0)), RallyPointY[7] - 1, RallyPointY[7] + 1)) then
        Actions.GroupOrderWalk(Groups[K], AttackPointX[7], AttackPointY[7], 2);
end;


procedure UnlockWarriors;
begin
  for I := 0 to 3 do
  begin
    if Scores[I] >= Utils.RoundToUp(LANCE_POINTS * DifficultyFactor * ArmyFactor, 10) then
      if not Unlocked[I][19] then
      begin
        Actions.UnitBlock(I, 19, False);
        Actions.ShowMsgFormatted(I, '<$3>', [States.UnitTypeName(19)]);
        ShowStatusStart[I] := States.GameTime;
        StatusString[I] := '[$A6FA57]<--- <$83> ' + States.UnitTypeName(19) + '![]';
        Unlocked[I][19] := True;
      end;
  end;

  for I := 0 to 3 do
  begin
    if Scores[I] >= Utils.RoundToUp(AXE_POINTS * DifficultyFactor * ArmyFactor, 10) then
      if not Unlocked[I][15] then
      begin
        Actions.UnitBlock(I, 15, False);
        Actions.ShowMsgFormatted(I, '<$3>', [States.UnitTypeName(15)]);
        ShowStatusStart[I] := States.GameTime;
        StatusString[I] := '[$A6FA57]<--- <$83> ' + States.UnitTypeName(15) + '![]';
        Unlocked[I][15] := True;
      end;
  end;

  for I := 0 to 3 do
  begin
    if Scores[I] >= Utils.RoundToUp(BOW_POINTS * DifficultyFactor * ArmyFactor, 10) then
      if not Unlocked[I][17] then
      begin
        Actions.UnitBlock(I, 17, False);
        Actions.ShowMsgFormatted(I, '<$3>', [States.UnitTypeName(17)]);
        ShowStatusStart[I] := States.GameTime;
        StatusString[I] := '[$A6FA57]<--- <$83> ' + States.UnitTypeName(17) + '![]';
        Unlocked[I][17] := True;
      end;
  end;

  for I := 0 to 3 do
  begin
    if Scores[I] >= Utils.RoundToUp(CROSSBOW_POINTS * DifficultyFactor * ArmyFactor, 10) then
      if not Unlocked[I][18] then
      begin
        Actions.UnitBlock(I, 18, False);
        Actions.ShowMsgFormatted(I, '<$3>', [States.UnitTypeName(18)]);
        ShowStatusStart[I] := States.GameTime;
        StatusString[I] := '[$A6FA57]<--- <$83> ' + States.UnitTypeName(18) + '![]';
        Unlocked[I][18] := True;
      end;
  end;

  for I := 0 to 3 do
  begin
    if Scores[I] >= Utils.RoundToUp(PIKE_POINTS * DifficultyFactor * ArmyFactor, 10) then
      if not Unlocked[I][20] then
      begin
        Actions.UnitBlock(I, 20, False);
        Actions.ShowMsgFormatted(I, '<$3>', [States.UnitTypeName(20)]);
        ShowStatusStart[I] := States.GameTime;
        StatusString[I] := '[$A6FA57]<--- <$83> ' + States.UnitTypeName(20) + '![]';
        Unlocked[I][20] := True;
      end;
  end;

  for I := 0 to 3 do
  begin
    if Scores[I] >= Utils.RoundToUp(SCOUT_POINTS * DifficultyFactor * ArmyFactor, 10) then
      if not Unlocked[I][21] then
      begin
        Actions.UnitBlock(I, 21, False);
        Actions.ShowMsgFormatted(I, '<$3>', [States.UnitTypeName(21)]);
        ShowStatusStart[I] := States.GameTime;
        StatusString[I] := '[$A6FA57]<--- <$83> ' + States.UnitTypeName(21) + '![]';
        Unlocked[I][21] := True;
      end;
  end;

  for I := 0 to 3 do
  begin
    if Scores[I] >= Utils.RoundToDown(SWORD_POINTS * DifficultyFactor * ArmyFactor, 10) then
      if not Unlocked[I][16] then
      begin
        Actions.UnitBlock(I, 16, False);
        Actions.ShowMsgFormatted(I, '<$3>', [States.UnitTypeName(16)]);
        ShowStatusStart[I] := States.GameTime;
        StatusString[I] := '[$A6FA57]<--- <$83> ' + States.UnitTypeName(16) + '![]';
        Unlocked[I][16] := True;
      end;
  end;

  for I := 0 to 3 do
  begin
    if Scores[I] >= Utils.RoundToDown(BARB_POINTS * DifficultyFactor * ArmyFactor, 20) then
      if not Unlocked[I][23] then
      begin
        Actions.UnitBlock(I, 23, False);
        Actions.ShowMsgFormatted(I, '<$3>' + ' <$4>', [States.UnitTypeName(23) + ', ' + States.UnitTypeName(26)]);
        ShowStatusStart[I] := States.GameTime;
        StatusString[I] := '[$A6FA57]<--- <$83> ' + States.UnitTypeName(23) + ' <$86> ' + States.UnitTypeName(26) + '![]';
        Unlocked[I][23] := True;
      end;
  end;

  for I := 0 to 3 do
  begin
    if Scores[I] >= Utils.RoundToUp(KNIGHT_POINTS * DifficultyFactor * ArmyFactor, 25) then
      if not Unlocked[I][22] then
      begin
        Actions.UnitBlock(I, 22, False);
        Actions.ShowMsgFormatted(I, '<$3>', [States.UnitTypeName(22)]);
        ShowStatusStart[I] := States.GameTime;
        StatusString[I] := '[$A6FA57]<--- <$83> ' + States.UnitTypeName(22) + '![]';
        Unlocked[I][22] := True;
      end;
  end;
end;


function FindClosestGroup(aPlayer, aX, aY, aType, aRadius: Integer): Integer; 
var 
  Groups: array of Integer;
  G, BestDistanceSqr, ThisDistanceSqr, DX, DY: Integer;
begin
  Result := -1;
  Groups := States.PlayerGetAllGroups(aPlayer);
  for I := 0 to Length(Groups) - 1 do
  begin
    G := Groups[I];
    DX := aX - States.UnitPositionX(States.GroupMember(G, 0));
    DY := aY - States.UnitPositionY(States.GroupMember(G, 0));
    ThisDistanceSqr := (DX * DX) + (DY * DY);
    if ((Abs(DX) < aRadius)
    and (Abs(DY) < aRadius))
    and ((Result = -1)
    or (ThisDistanceSqr< BestDistanceSqr))
    and (States.GroupType(G) = aType) then
    begin
      BestDistanceSqr := ThisDistanceSqr;
      Result := Groups[I];
    end;
  end;
end;


procedure CheckSplittedGroups(aPlayer: Integer);
var
  G1, G2, Count1, Count2, GT, X1, Y1, X2, Y2, J, UT: Integer;
  Groups: array of Integer;
begin
  if States.PlayerEnabled(aPlayer) then
    Groups := States.PlayerGetAllGroups(aPlayer);

  for K := 0 to length(Groups) - 1 do
  begin
    if Groups[K] > 0 then
      if States.GroupMember(Groups[K], 0) > 0 then
      begin
        G1 := Groups[K];
        if G1 <= 0 then
          Exit;
        Count1 := States.GroupMemberCount(G1);
        UT := States.UnitType(States.GroupMember(G1, 0));
        GT := States.GroupType(G1);
        X1 := States.UnitPositionX(States.GroupMember(G1, 0));
        Y1 := States.UnitPositionY(States.GroupMember(G1, 0));
      end;
    end;

  for J := length(Groups) - 1 downto 0 do
  begin
    if Groups[J] > 0 then
      if States.GroupMember(Groups[J], 0) > 0 then
      begin
        X2 := States.UnitPositionX(States.GroupMember(Groups[J], 0));
        Y2 := States.UnitPositionY(States.GroupMember(Groups[J], 0));
        if (Abs(X1 - X2) <= LINK_RADIUS)
        and (Abs(Y1 - Y2) <= LINK_RADIUS)
        and (States.GroupType(Groups[J]) = GT)
        and (States.UnitType(States.GroupMember(Groups[J], 0)) = UT) then
        begin
          G2 := Groups[J];
          Count2 := States.GroupMemberCount(G2);
        end;
      end;
    end;

  if G1 <= 0 then
    Exit;

  if G2 <= 0 then
    Exit;

  if (Count1 < Round(MIN_UNITS_COUNT / DifficultyFactor))
  or (Count2 < Round(MIN_UNITS_COUNT / DifficultyFactor))
  and (G1 > 0)
  and (G2 > 0) then
  begin
    Actions.GroupOrderLink(G1, G2);
    Actions.GroupSetFormation(G2, 1 + Round(sqrt(States.GroupMemberCount(G2))));        
  end;

end;


procedure OnUnitDied(aUnitID, aKillerIndex: Integer);
var
  Addition, GroupToLink, I, Owner, Owner1, GT, UT: Integer;
  Groups: array of Integer;
begin
  if (aKillerIndex = -1)
  and (States.UnitHunger(aUnitID) > 0) then
    Exit;

  if (Utils.InRangeI(States.UnitOwner(aUnitID), 4, 7))
  and (Utils.InRangeI(aKillerIndex, 0, 3))
  and (States.UnitHunger(aUnitID) > 400) then
    Scores[aKillerIndex] := Scores[aKillerIndex] + 1;

  UnlockWarriors;

  if Utils.InRangeI(States.UnitOwner(aUnitID), 0, 3) then
    Owner := States.UnitOwner(aUnitID);

  if Utils.InRangeI(States.UnitOwner(aUnitID), 4, 7) then
    Owner1 := aKillerIndex;

  if Utils.InRangeI(States.UnitType(aUnitID), 14, 27) then
  begin
    UT := States.UnitType(aUnitID);

    if bReborn then
    begin
      if States.KaMRandom < (REBORN_CHANCE / DifficultyFactor) then
      begin
        if (Utils.InRangeI(States.UnitOwner(aUnitID), 0, 3)) then
        begin
          Addition := Actions.GiveGroup(Owner, UT, SpawnX[Owner], SpawnY[Owner], 4, 1, 1);
          GT := States.GroupType(Addition);
          Actions.GroupHungerSet(Addition, States.UnitMaxHunger);
          Groups := States.PlayerGetAllGroups(Owner);
          for I := Length(Groups) - 1 downto 0 do            
            if (Addition > 0)
            and (States.GroupType(Groups[I]) = GT)
            and (Abs(States.UnitPositionY(States.GroupMember(Groups[I], States.KaMRandomI(States.GroupMemberCount(Groups[I])))) - States.UnitPositionY(States.GroupMember(Addition, 0))) <= AUTOLINK_RADIUS)
            and (Abs(States.UnitPositionX(States.GroupMember(Groups[I], States.KaMRandomI(States.GroupMemberCount(Groups[I])))) - States.UnitPositionX(States.GroupMember(Addition, 0))) <= AUTOLINK_RADIUS) then
            begin
              GroupToLink := Groups[I];
              if GroupToLink > 0 then
                begin
                  Actions.GroupOrderLink(Addition, GroupToLink);
                  Actions.GroupSetFormation(GroupToLink, 1 + Round(sqrt(States.GroupMemberCount(GroupToLink))));
                end;
            end;
        end;
      end;
    end;

    if bNewborn then
    begin
      if States.KaMRandom < (NEWBORN_CHANCE / DifficultyFactor) then
      begin
        if (Utils.InRangeI(aKillerIndex, 0, 3))
        and (Utils.InRangeI(States.UnitOwner(aUnitID), 4, 7)) then
        begin
          Addition := Actions.GiveGroup(Owner1, UT, SpawnX[Owner1], SpawnY[Owner1], 4, 1, 1);
          GT := States.GroupType(Addition);
          Actions.GroupHungerSet(Addition, States.UnitMaxHunger);
          Groups := States.PlayerGetAllGroups(Owner1);
          for I := Length(Groups) - 1 downto 0 do
            if (Addition > 0)
            and (States.GroupType(Groups[I]) = GT)
            and (Abs(States.UnitPositionY(States.GroupMember(Groups[I], States.KaMRandomI(States.GroupMemberCount(Groups[I])))) - States.UnitPositionY(States.GroupMember(Addition, 0))) <= AUTOLINK_RADIUS)
            and (Abs(States.UnitPositionX(States.GroupMember(Groups[I], States.KaMRandomI(States.GroupMemberCount(Groups[I])))) - States.UnitPositionX(States.GroupMember(Addition, 0))) <= AUTOLINK_RADIUS) then
            begin
              GroupToLink := Groups[I];
              if GroupToLink > 0 then
                begin
                  Actions.GroupOrderLink(Addition, GroupToLink);
                  Actions.GroupSetFormation(GroupToLink, 1 + Round(sqrt(States.GroupMemberCount(GroupToLink))));
                end;
            end;
        end;
      end;
    end;
  end;
end;


procedure OnUnitWounded(aUnitID, aAttacker: Integer);
begin
  if bImmediateKill then
  begin
    if States.KaMRandom < (KILL_CHANCE / DifficultyFactor) then
    begin
      if (Utils.InRangeI(States.UnitOwner(aAttacker), 0, 3))
      and (States.UnitHunger(aUnitID) > 400) then
        inc(Scores[States.UnitOwner(aAttacker)]);
      if Utils.InRangeI(States.UnitOwner(aUnitID), 4, 7) then
        Actions.UnitKill(aUnitID, False);
    end;
  end;

  if bRetribution then
  begin
    if States.KaMRandom < (RETRIBUTION_CHANCE / DifficultyFactor) then
    begin
      if (Utils.InRangeI(States.UnitOwner(aUnitID), 0, 3))
      and (Utils.InRangeI(States.UnitOwner(aAttacker), 4, 7))
      and (States.UnitHunger(aAttacker) > 400) then
      begin
        inc(Scores[States.UnitOwner(aUnitID)]);
        Actions.UnitKill(aAttacker, False);
      end;
    end;
  end;
end;


procedure OnWarriorEquipped(aUnitID, aGroupID: Integer);
var
  Rogue, Barb, Owner, Addition, GroupToLink: Integer;
  Groups, Groups1: array of Integer;
  R: Integer;
begin
  Owner := States.UnitOwner(aUnitID);

  if bDouble then
  begin
    if States.KaMRandom < (DOUBLE_CHANCE / DifficultyFactor) then
    begin
      if (States.UnitType(aUnitID) >= 14)
      and not (Utils.InRangeI(States.UnitType(aUnitID), 17, 18)) then
      begin 
        Addition := Actions.GiveGroup(Owner, States.UnitType(aUnitID), States.HousePositionX(Barracks[States.UnitOwner(aUnitID)]), States.HousePositionY(Barracks[States.UnitOwner(aUnitID)]) + 1, 4, 1, 1);
        GroupToLink := aGroupID;
        if GroupToLink > 0 then
        begin
          Actions.GroupHungerSet(Addition, States.UnitMaxHunger);
          Actions.GroupOrderLink(Addition, GroupToLink);
          Actions.GroupSetFormation(GroupToLink, 1 + Round(sqrt(States.GroupMemberCount(GroupToLink))));
        end;
      end
      else
      if Utils.InRangeI(States.UnitType(aUnitID), 17, 18)
      and (States.StatUnitMultipleTypesCount(Owner, [17, 18]) <= MAX_RANGED) then
      begin 
        Addition := Actions.GiveGroup(Owner, States.UnitType(aUnitID), States.HousePositionX(Barracks[States.UnitOwner(aUnitID)]), States.HousePositionY(Barracks[States.UnitOwner(aUnitID)]) + 1, 4, 1, 1);
        GroupToLink := aGroupID;
        if GroupToLink > 0 then
        begin
          Actions.GroupHungerSet(Addition, States.UnitMaxHunger);
          Actions.GroupOrderLink(Addition, GroupToLink);
          Actions.GroupSetFormation(GroupToLink, 1 + Round(sqrt(States.GroupMemberCount(GroupToLink))));
        end;
      end;
    end;
  end;

  if bRanged then
  begin
    if States.KaMRandom < (RANGED_CHANCE / DifficultyFactor) then
    begin
      if Utils.InRangeI(States.UnitType(aUnitID), 14, 16)
      and (States.StatUnitMultipleTypesCount(Owner, [17, 18]) <= Utils.RoundToUp(MAX_RANGED / DifficultyFactor, 5)) then
      begin 
        Addition := Actions.GiveGroup(Owner, States.KaMRandomI(2) + 17, States.HousePositionX(Barracks[States.UnitOwner(aUnitID)]), States.HousePositionY(Barracks[States.UnitOwner(aUnitID)]) + 1, 4, 1, 1);
        Actions.GroupHungerSet(Addition, States.UnitMaxHunger);
        Groups := States.PlayerGetAllGroups(Owner);
        for I := Length(Groups) - 1 downto 0 do
          if (States.GroupType(Groups[I]) = 2)
          and (Abs(States.UnitPositionY(States.GroupMember(Groups[I], States.KaMRandomI(States.GroupMemberCount(Groups[I])))) - States.UnitPositionY(States.GroupMember(Addition, 0))) <= AUTOLINK_RADIUS)
          and (Abs(States.UnitPositionX(States.GroupMember(Groups[I], States.KaMRandomI(States.GroupMemberCount(Groups[I])))) - States.UnitPositionX(States.GroupMember(Addition, 0))) <= AUTOLINK_RADIUS) then
          begin
            Actions.GroupOrderLink(Addition, Groups[I]);
            Actions.GroupSetFormation(Groups[I], 1 + Round(sqrt(States.GroupMemberCount(Groups[I]))));
          end;
      end;
    end;
  end;

  if (Unlocked[Owner][23])
  and (States.HouseRepair(Barracks[Owner]))
  and (States.HouseResourceAmount(Barracks[Owner], 20) > 3)
  and (States.UnitType(aUnitID) = 14) then
  begin
    R := States.KaMRandomI(10);
    if R < 5 then
    begin
      if not bDouble then
        Barb := Actions.GiveGroup(States.UnitOwner(aUnitID), 23, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID) + 1, 4, 1, 1);
      if bDouble then
      begin
        if States.KaMRandom < (DOUBLE_CHANCE / DifficultyFactor) then
          Barb := Actions.GiveGroup(States.UnitOwner(aUnitID), 23, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID) + 1, 4, 2, 1)
        else
          Barb := Actions.GiveGroup(States.UnitOwner(aUnitID), 23, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID) + 1, 4, 1, 1);
      end;
    end;
    if R >= 5 then
    begin
      if not bDouble then
        Barb := Actions.GiveGroup(States.UnitOwner(aUnitID), 26, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID) + 1, 4, 1, 1);
      if bDouble then
      begin
        if States.KaMRandom < (DOUBLE_CHANCE / DifficultyFactor) then
          Barb := Actions.GiveGroup(States.UnitOwner(aUnitID), 26, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID) + 1, 4, 2, 1)
        else
          Barb := Actions.GiveGroup(States.UnitOwner(aUnitID), 26, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID) + 1, 4, 1, 1);
      end;
    end;
    Actions.HouseTakeWaresFrom(Barracks[Owner], 20, 3);
    Actions.GroupHungerSet(Barb, States.UnitMaxHunger);
    Actions.GroupOrderLink(Barb, aGroupID);
    Actions.GroupSetFormation(aGroupID, 1 + Round(sqrt(States.GroupMemberCount(aGroupID))));
    Actions.UnitKill(aUnitID, True);

  end;

  Actions.UnitHungerSet(aUnitID, States.UnitMaxHunger);
  if States.UnitType(aUnitID) = 14 then
    if States.KaMRandom < (ROGUE_CHANCE / DifficultyFactor) then
    begin
      Rogue := Actions.GiveGroup(States.UnitOwner(aUnitID), 25, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID) + 1, 4, 1, 1);
      Actions.GroupHungerSet(Rogue, States.UnitMaxHunger);
      Groups1 := States.PlayerGetAllGroups(States.UnitOwner(aUnitID));
      for I := 0 to Length(Groups1) - 1 do
        if States.GroupType(Groups1[I]) = 2 then
        begin
          Actions.GroupOrderLink(Rogue, Groups1[I]);
          Actions.GroupSetFormation(Groups1[I], 1 + Round(sqrt(States.GroupMemberCount(Groups1[I]))));
        end;
    end;
end;


procedure GetReinforce;
var
  R: array[0..3] of Integer;
begin
  for I := 0 to 3 do
  begin
    if States.PlayerEnabled(I)
    and not (States.PlayerDefeated(I)) then
      begin
        if States.KaMRandom < 0.33 then
          R[I] := Actions.GiveGroup(I, 16, SpawnX[I], SpawnY[I], 4, 12 + States.KaMRandomI(5), 3 + States.KaMRandomI(3))
        else
        if Utils.InRangeI(Round(100 * States.KaMRandom), 33, 66) then 
          R[I] := Actions.GiveGroup(I, 20, SpawnX[I], SpawnY[I], 4, 12 + States.KaMRandomI(5), 3 + States.KaMRandomI(3))
        else
          R[I] := Actions.GiveGroup(I, 22, SpawnX[I], SpawnY[I], 4, 12 + States.KaMRandomI(5), 3 + States.KaMRandomI(3));
        Actions.GroupHungerSet(R[I], States.UnitMaxHunger);
      end;
  end;
end;


procedure UpdateFOW;
begin
  for I := 0 to 3 do
    if States.PlayerEnabled(I) then
    begin
      Actions.FogCoverAll(I);
      Actions.FogRevealCircle(I, 75, 76, 45);
    end;
end;


procedure GetGroupRandomType;
var
  R: Integer;
begin 

    case Wave of

      16: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(4);
            case R of
              0, 2: GroupRandomType[I] := 15;
              1, 3: GroupRandomType[I] := 19;
            end;
          end;

      17: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(4);
            case R of
              0, 2: GroupRandomType[I] := 20;
              1, 3: GroupRandomType[I] := 19;
            end;
          end;

      18: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(10);
            case R of
              0..6: GroupRandomType[I] := 21;
              7..9: GroupRandomType[I] := 20;
            end;
          end;

      19: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(10);
            case R of
              0..4: GroupRandomType[I] := 21;
              5..9: GroupRandomType[I] := 20;
            end;
          end;

      21: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(10);
            case R of
              0..6: GroupRandomType[I] := 16;
              7..9: GroupRandomType[I] := 21;
            end;
          end;

      23: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(10);
            case R of
              0..6: GroupRandomType[I] := 16;
              7..9: GroupRandomType[I] := 20;
            end;
          end;

      24: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(10);
            case R of
              0..6: GroupRandomType[I] := 16;
              7..9: GroupRandomType[I] := 20;
            end;
          end;

      25: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      26: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      27: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      28: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      29: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      30: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      31: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      32: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      33: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      34: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;

      35: for I := 0 to RANDOM_FACTOR - 1 do
          begin
            R := States.KaMRandomI(16);
            case R of
              0..2:   GroupRandomType[I] := 16;
              3..6:   GroupRandomType[I] := 22;
              7..9:   GroupRandomType[I] := 20;
              10..12: GroupRandomType[I] := 26;
              13..15: GroupRandomType[I] := 23;
            end;
          end;
  end;

  if (Wave > 25)
  and (States.MissionDifficulty = mdHard1) then
    for I := 0 to RANDOM_FACTOR - 1 do
      if States.KaMRandom > 0.8 then
        GroupRandomType[I] := 17 + States.KaMRandomI(2);
  
end;

    
procedure GetAttacks;
begin
  if Wave < MAX_WAVE then
  begin
    Wave := Wave + 1;
    Actions.PlayWAV(-1, 'NEWWAVE', 1);
    UpdateFOW;
    WaveTime := Delay;
    GetGroupRandomType;
  end;  

  case Wave of
    2: begin

         for I := 0 to 3 do
         begin
           if States.PlayerEnabled(I) then
           begin
             Actions.GiveWares(I, 7, 12 + 3 * Q);
             if States.MissionDifficulty = mdEasy1 then
             begin
               Actions.HouseUnlock(I, 17);               
               Actions.ShowMsgFormatted(I, '<$91>', [MAX_TOWERS + Byte(States.MissionDifficulty = mdEasy1)]);
             end;
           end;
         end;

         Actions.ShowMsg(-1, '<$75>');

         AIGroup := Actions.GiveGroup(4, 14, 27, 23, 4, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 14, 20, 28, 2, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 14, 125, 23, 4, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 14, 130, 30, 6, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 14, 130, 120, 6, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 14, 126, 128, 0, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 14, 37, 133, 0, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 14, 18, 122, 2, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 14, AISpawnX[0][4], AISpawnY[0][4], 4, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 14, AISpawnX[1][4], AISpawnY[1][4], 4, 4, 2);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 14, AISpawnX[2][4], AISpawnY[2][4], 4, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 14, AISpawnX[0][5], AISpawnY[0][5], 6, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 14, AISpawnX[1][5], AISpawnY[1][5], 6, 4, 2);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 14, AISpawnX[2][5], AISpawnY[2][5], 6, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 14, AISpawnX[0][6], AISpawnY[0][6], 0, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 14, AISpawnX[1][6], AISpawnY[1][6], 0, 4, 2);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 14, AISpawnX[2][6], AISpawnY[2][6], 0, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 14, AISpawnX[0][7], AISpawnY[0][7], 2, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 14, AISpawnX[1][7], AISpawnY[1][7], 2, 4, 2);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 14, AISpawnX[2][7], AISpawnY[2][7], 2, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    3: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 12 + 3 * Q);

         AIGroup := Actions.GiveGroup(4, 14, 27, 23, 4, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 14, 20, 28, 2, 3, 2);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 14, 125, 23, 4, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 14, 130, 30, 6, 3, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 14, 130, 120, 6, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 14, 126, 128, 0, 3, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 14, 37, 133, 0, 2, 2);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 14, 18, 122, 2, 3, 2);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 14, AISpawnX[0][4], AISpawnY[0][4], 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 14, AISpawnX[1][4], AISpawnY[1][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 14, AISpawnX[2][4], AISpawnY[2][4], 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 14, AISpawnX[0][5], AISpawnY[0][5], 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 14, AISpawnX[1][5], AISpawnY[1][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 14, AISpawnX[2][5], AISpawnY[2][5], 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 14, AISpawnX[0][6], AISpawnY[0][6], 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 14, AISpawnX[1][6], AISpawnY[1][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 14, AISpawnX[2][6], AISpawnY[2][6], 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 14, AISpawnX[0][7], AISpawnY[0][7], 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 14, AISpawnX[1][7], AISpawnY[1][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 14, AISpawnX[2][7], AISpawnY[2][7], 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    4: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 12 + 3 * Q);

         Actions.ShowMsg(-1, '<$76>');

         AIGroup := Actions.GiveGroup(4, 14, 27, 23, 4, 3, 2);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 14, 20, 28, 2, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 14, 125, 23, 4, 3, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 14, 130, 30, 6, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 14, 130, 120, 6, 3, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 14, 126, 128, 0, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 14, 37, 133, 0, 3, 2);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 14, 18, 122, 2, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 14, AISpawnX[0][4], AISpawnY[0][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 19, AISpawnX[1][4], AISpawnY[1][4], 4, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 14, AISpawnX[2][4], AISpawnY[2][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 14, AISpawnX[0][5], AISpawnY[0][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 19, AISpawnX[1][5], AISpawnY[1][5], 6, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 14, AISpawnX[2][5], AISpawnY[2][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 14, AISpawnX[0][6], AISpawnY[0][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 19, AISpawnX[1][6], AISpawnY[1][6], 0, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 14, AISpawnX[2][6], AISpawnY[2][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 14, AISpawnX[0][7], AISpawnY[0][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 19, AISpawnX[1][7], AISpawnY[1][7], 2, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 14, AISpawnX[2][7], AISpawnY[2][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    5: begin

         for I := 0 to 3 do
         begin
           if States.PlayerEnabled(I) then
           begin
             Actions.GiveWares(I, 7, 12 + 3 * Q);
             if States.MissionDifficulty = mdNormal then
             begin
               Actions.HouseUnlock(I, 17);
               Actions.ShowMsgFormatted(I, '<$91>', [MAX_TOWERS + Byte(States.MissionDifficulty = mdEasy1)]);
             end;
           end;
         end;

         AIGroup := Actions.GiveGroup(4, 14, 27, 23, 4, 4, 3);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 14, 20, 28, 2, 5, 3);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 19, 125, 23, 4, 4, 3);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 19, 130, 30, 6, 5, 3);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 19, 130, 120, 6, 4, 3);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 19, 126, 128, 0, 5, 3);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 19, 37, 133, 0, 4, 3);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 19, 18, 122, 2, 5, 3);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 19, AISpawnX[0][4], AISpawnY[0][4], 4, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 14, AISpawnX[1][4], AISpawnY[1][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 19, AISpawnX[2][4], AISpawnY[2][4], 4, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 19, AISpawnX[0][5], AISpawnY[0][5], 6, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 14, AISpawnX[1][5], AISpawnY[1][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 19, AISpawnX[2][5], AISpawnY[2][5], 6, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 19, AISpawnX[0][6], AISpawnY[0][6], 0, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 14, AISpawnX[1][6], AISpawnY[1][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 19, AISpawnX[2][6], AISpawnY[2][6], 0, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 19, AISpawnX[0][7], AISpawnY[0][7], 2, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 14, AISpawnX[1][7], AISpawnY[1][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 19, AISpawnX[2][7], AISpawnY[2][7], 2, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    6: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 12 + 3 * Q);

         AIGroup := Actions.GiveGroup(4, 14, 27, 23, 4, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 14, 20, 28, 2, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 14, 125, 23, 4, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 14, 130, 30, 6, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 14, 130, 120, 6, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 14, 126, 128, 0, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 14, 37, 133, 0, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 14, 18, 122, 2, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 19, AISpawnX[0][4], AISpawnY[0][4], 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 15, AISpawnX[1][4], AISpawnY[1][4], 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 19, AISpawnX[2][4], AISpawnY[2][4], 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 19, AISpawnX[0][5], AISpawnY[0][5], 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 15, AISpawnX[1][5], AISpawnY[1][5], 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 19, AISpawnX[2][5], AISpawnY[2][5], 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 19, AISpawnX[0][6], AISpawnY[0][6], 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 15, AISpawnX[1][6], AISpawnY[1][6], 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 19, AISpawnX[2][6], AISpawnY[2][6], 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 19, AISpawnX[0][7], AISpawnY[0][7], 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 15, AISpawnX[1][7], AISpawnY[1][7], 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 19, AISpawnX[2][7], AISpawnY[2][7], 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    7: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 12 + 3 * Q);

         AIGroup := Actions.GiveGroup(4, 14, 27, 23, 4, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 14, 20, 28, 2, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 14, 125, 23, 4, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 14, 130, 30, 6, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 14, 130, 120, 6, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 14, 126, 128, 0, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 14, 37, 133, 0, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 14, 18, 122, 2, 5, 2);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 15, AISpawnX[0][4], AISpawnY[0][4], 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 19, AISpawnX[1][4], AISpawnY[1][4], 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 15, AISpawnX[2][4], AISpawnY[2][4], 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 15, AISpawnX[0][5], AISpawnY[0][5], 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 19, AISpawnX[1][5], AISpawnY[1][5], 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 15, AISpawnX[2][5], AISpawnY[2][5], 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 15, AISpawnX[0][6], AISpawnY[0][6], 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 19, AISpawnX[1][6], AISpawnY[1][6], 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 15, AISpawnX[2][6], AISpawnY[2][6], 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 15, AISpawnX[0][7], AISpawnY[0][7], 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 19, AISpawnX[1][7], AISpawnY[1][7], 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 15, AISpawnX[2][7], AISpawnY[2][7], 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    8: begin

         for I := 0 to 3 do
         begin
           if States.PlayerEnabled(I) then
           begin
             Actions.GiveWares(I, 7, 15 + 3 * Q);
             if States.MissionDifficulty = mdHard1 then
             begin
               Actions.HouseUnlock(I, 17);
               Actions.ShowMsgFormatted(I, '<$91>', [MAX_TOWERS + Byte(States.MissionDifficulty = mdEasy1)]);
             end;
           end;
         end;

         AIGroup := Actions.GiveGroup(4, 14, 27, 23, 4, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 14, 20, 28, 2, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 14, 125, 23, 4, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 14, 130, 30, 6, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 14, 130, 120, 6, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 14, 126, 128, 0, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 14, 37, 133, 0, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 14, 18, 122, 2, 6, 2);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 15, AISpawnX[0][4], AISpawnY[0][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 21, AISpawnX[1][4], AISpawnY[1][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 15, AISpawnX[2][4], AISpawnY[2][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 15, AISpawnX[0][5], AISpawnY[0][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 21, AISpawnX[1][5], AISpawnY[1][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 15, AISpawnX[2][5], AISpawnY[2][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 15, AISpawnX[0][6], AISpawnY[0][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 21, AISpawnX[1][6], AISpawnY[1][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 15, AISpawnX[2][6], AISpawnY[2][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 15, AISpawnX[0][7], AISpawnY[0][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 21, AISpawnX[1][7], AISpawnY[1][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 15, AISpawnX[2][7], AISpawnY[2][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    9: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 15 + 3 * Q);

         AIGroup := Actions.GiveGroup(4, 19, 27, 23, 4, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 19, 20, 28, 2, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 19, 125, 23, 4, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 19, 130, 30, 6, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 19, 130, 120, 6, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 19, 126, 128, 0, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 19, 37, 133, 0, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 19, 18, 122, 2, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 21, AISpawnX[0][4], AISpawnY[0][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 17, AISpawnX[1][4], AISpawnY[1][4], 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 15, AISpawnX[2][4], AISpawnY[2][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 21, AISpawnX[0][5], AISpawnY[0][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 17, AISpawnX[1][5], AISpawnY[1][5], 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 15, AISpawnX[2][5], AISpawnY[2][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 21, AISpawnX[0][6], AISpawnY[0][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 17, AISpawnX[1][6], AISpawnY[1][6], 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 15, AISpawnX[2][6], AISpawnY[2][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 21, AISpawnX[0][7], AISpawnY[0][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 17, AISpawnX[1][7], AISpawnY[1][7], 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 15, AISpawnX[2][7], AISpawnY[2][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    10: begin

          for I := 0 to 3 do
            if States.PlayerEnabled(I) then
              Actions.GiveWares(I, 7, 15 + 3 * Q);

         AIGroup := Actions.GiveGroup(4, 15, 27, 23, 4, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 15, 20, 28, 2, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 15, 125, 23, 4, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 15, 130, 30, 6, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 15, 130, 120, 6, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 15, 126, 128, 0, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 15, 37, 133, 0, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 15, 18, 122, 2, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 21, AISpawnX[0][4], AISpawnY[0][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 15, AISpawnX[1][4], AISpawnY[1][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 21, AISpawnX[2][4], AISpawnY[2][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 21, AISpawnX[0][5], AISpawnY[0][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 15, AISpawnX[1][5], AISpawnY[1][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 21, AISpawnX[2][5], AISpawnY[2][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 21, AISpawnX[0][6], AISpawnY[0][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 15, AISpawnX[1][6], AISpawnY[1][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 21, AISpawnX[2][6], AISpawnY[2][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 21, AISpawnX[0][7], AISpawnY[0][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 15, AISpawnX[1][7], AISpawnY[1][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 21, AISpawnX[2][7], AISpawnY[2][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    11: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 15 + 3 * Q);

         AIGroup := Actions.GiveGroup(4, 21, 27, 23, 4, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 21, 20, 28, 2, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 21, 125, 23, 4, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 21, 130, 30, 6, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 21, 130, 120, 6, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 21, 126, 128, 0, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 21, 37, 133, 0, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 21, 18, 122, 2, 4, 2);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 21, AISpawnX[0][4], AISpawnY[0][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 21, AISpawnX[1][4], AISpawnY[1][4], 4, 16, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 21, AISpawnX[2][4], AISpawnY[2][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 21, AISpawnX[0][5], AISpawnY[0][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 21, AISpawnX[1][5], AISpawnY[1][5], 6, 16, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 21, AISpawnX[2][5], AISpawnY[2][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 21, AISpawnX[0][6], AISpawnY[0][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 21, AISpawnX[1][6], AISpawnY[1][6], 0, 16, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 21, AISpawnX[2][6], AISpawnY[2][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 21, AISpawnX[0][7], AISpawnY[0][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 21, AISpawnX[1][7], AISpawnY[1][7], 2, 16, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 21, AISpawnX[2][7], AISpawnY[2][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    12: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 15 +  3 * Q);

         AIGroup := Actions.GiveGroup(4, 24, 27, 23, 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 61, 61, 4);
         AIGroup := Actions.GiveGroup(4, 24, 20, 28, 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 60, 70, 4);

         AIGroup := Actions.GiveGroup(5, 24, 125, 23, 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 90, 64, 4);
         AIGroup := Actions.GiveGroup(5, 24, 130, 30, 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 92, 70, 4);

         AIGroup := Actions.GiveGroup(6, 24, 130, 120, 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 92, 78, 0);
         AIGroup := Actions.GiveGroup(6, 24, 126, 128, 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 90, 93, 0);

         AIGroup := Actions.GiveGroup(7, 24, 37, 133, 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 56, 84, 0);
         AIGroup := Actions.GiveGroup(7, 24, 18, 122, 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 64, 94, 0);

         AIGroup := Actions.GiveGroup(4, 20, AISpawnX[0][4], AISpawnY[0][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 18, AISpawnX[1][4], AISpawnY[1][4], 4, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);
         AIGroup := Actions.GiveGroup(4, 15, AISpawnX[2][4], AISpawnY[2][4], 4, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[4], RallyPointY[4], 4);

         AIGroup := Actions.GiveGroup(5, 20, AISpawnX[0][5], AISpawnY[0][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 18, AISpawnX[1][5], AISpawnY[1][5], 6, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);
         AIGroup := Actions.GiveGroup(5, 15, AISpawnX[2][5], AISpawnY[2][5], 6, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[5], RallyPointY[5], 6);

         AIGroup := Actions.GiveGroup(6, 20, AISpawnX[0][6], AISpawnY[0][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 18, AISpawnX[1][6], AISpawnY[1][6], 0, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);
         AIGroup := Actions.GiveGroup(6, 15, AISpawnX[2][6], AISpawnY[2][6], 0, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[6], RallyPointY[6], 0);

         AIGroup := Actions.GiveGroup(7, 20, AISpawnX[0][7], AISpawnY[0][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 18, AISpawnX[1][7], AISpawnY[1][7], 2, 6, 3);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
         AIGroup := Actions.GiveGroup(7, 15, AISpawnX[2][7], AISpawnY[2][7], 2, 12, 4);
         Actions.GroupOrderWalk(AIGroup, RallyPointX[7], RallyPointY[7], 2);
       end;

    13: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 15 + 3 * Q);

         Actions.ShowMsg(-1, '<$77>');

         AIGroup := Actions.GiveGroup(4, 15, 57, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 75, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 15, 93, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 15, 140, 57, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 15, 140, 93, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 15, 57, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 75, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 15, 93, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 15, 10, 57, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 15, 10, 93, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, 24, 30, 5, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, 24, 120, 5, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, 24, 145, 30, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, 24, 145, 120, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, 24, 30, 145, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, 24, 120, 145, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, 24, 5, 30, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, 24, 5, 120, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    14: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 16 + 4 * Q);

         AIGroup := Actions.GiveGroup(4, 20, 57, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 21, 75, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 15, 93, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 140, 57, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 21, 140, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 15, 140, 93, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 20, 57, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 21, 75, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 15, 93, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 10, 57, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 21, 10, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 15, 10, 93, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, 27, 30, 5, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, 27, 120, 5, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, 27, 145, 30, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, 27, 145, 120, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, 27, 30, 145, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, 27, 120, 145, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, 27, 5, 30, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, 27, 5, 120, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    15: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 16 + 4 * Q);

         AIGroup := Actions.GiveGroup(4, 20, 57, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 15, 75, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 93, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 140, 57, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 15, 140, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 93, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 20, 57, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 15, 75, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 93, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 10, 57, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 15, 10, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 93, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, 27, 30, 5, 4, Utils.RoundToUp(30 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, 27, 120, 5, 4, Utils.RoundToUp(30 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, 27, 145, 30, 6, Utils.RoundToUp(30 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, 27, 145, 120, 6, Utils.RoundToUp(30 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, 27, 30, 145, 0, Utils.RoundToUp(30 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, 27, 120, 145, 0, Utils.RoundToUp(30 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, 27, 5, 30, 2, Utils.RoundToUp(30 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, 27, 5, 120, 2, Utils.RoundToUp(30 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    16: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 16 + 4 * Q);

         AIGroup := Actions.GiveGroup(4, 20, 57, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 75, 10, 4, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 93, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 140, 57, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 18, 140, 75, 6, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 93, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 20, 57, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 75, 140, 0, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 93, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 10, 57, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 18, 10, 75, 2, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 93, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    17: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 16 + 4 * Q);

         AIGroup := Actions.GiveGroup(4, 20, 57, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 16, 75, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 93, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 140, 57, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 16, 140, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 93, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 20, 57, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 16, 75, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 93, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 10, 57, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 16, 10, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 93, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    18: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 16 + 4 * Q);

         if bReinforce then
           GetReinforce;         

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, 20, 57, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 16, 75, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 93, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 140, 57, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 16, 140, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 93, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 20, 57, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 16, 75, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 93, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 10, 57, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 16, 10, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 93, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    19: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 18 + 3 * Q);

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;      

         AIGroup := Actions.GiveGroup(4, 20, 57, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 16, 75, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 93, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 140, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 16, 140, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 20, 57, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 16, 75, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 93, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 10, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 16, 10, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    20: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
           begin
             Actions.GiveWares(I, 7, 18 + 3 * Q);
             Actions.GiveWeapons(I, 24, 10);
             Actions.GiveWeapons(I, 25, 10);
             Actions.GiveWeapons(I, 18, 10);
             Actions.GiveWeapons(I, 19, 10);
           end;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, 20, 57, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 22, 75, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 93, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 140, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 22, 140, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 20, 57, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 22, 75, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 93, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 10, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 22, 10, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, 20, 30, 5, 4, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 120, 5, 4, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 145, 30, 6, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, 20, 145, 120, 6, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, 20, 30, 145, 0, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 120, 145, 0, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 5, 30, 2, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, 20, 5, 120, 2, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    21: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 18 + 4 * Q);

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, 20, 57, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 22, 75, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 93, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 140, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 22, 140, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 20, 57, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 22, 75, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 93, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 10, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 22, 10, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    22: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 20 + 5 * Q);

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, 20, 57, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 22, 75, 10, 4, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 93, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 20, 140, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 22, 140, 75, 6, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 20, 57, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 22, 75, 140, 0, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 93, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 20, 10, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 22, 10, 75, 2, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, 22, 30, 5, 4, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, 22, 120, 5, 4, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, 22, 145, 30, 6, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, 22, 145, 120, 6, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, 22, 30, 145, 0, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, 22, 120, 145, 0, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, 22, 5, 30, 2, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, 22, 5, 120, 2, Utils.RoundToUp(9 * DifficultyFactor, 4), 3);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    23: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 20 + 5 * Q);

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, 23, 57, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 75, 10, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 23, 93, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 23, 140, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 75, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 23, 140, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 23, 57, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 75, 140, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 23, 93, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 23, 10, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 75, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 23, 10, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    24: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 20 + 5 * Q);

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, 26, 57, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 75, 15, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 20, 75, 10, 4, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 26, 93, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 26, 140, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 20, 140, 75, 6, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 18, 135, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 26, 140, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 26, 57, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 20, 75, 140, 0, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 75, 135, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 26, 93, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 26, 10, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 20, 10, 75, 2, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 18, 15, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 26, 10, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    25: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 20 + 5 * Q);

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 75, 15, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 18, 135, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 75, 135, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 18, 15, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    26: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
           begin
             Actions.GiveWares(I, 7, 20 + 5 * Q);
             Actions.GiveWeapons(I, 24, 15);
             Actions.GiveWeapons(I, 25, 15);
             Actions.GiveWeapons(I, 18, 15);
             Actions.GiveWeapons(I, 19, 15);
           end;

         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         Actions.ShowMsgFormatted(-1, '<$78>', [Utils.RoundToUp(RESCUE_ARMY_COUNT / DifficultyFactor, 20), Utils.RoundToUp(RESCUE_RECRUITS_COUNT / DifficultyFactor, 5)]);

         AIGroup := Actions.GiveGroup(4, 22, 57, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 75, 15, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 22, 93, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 22, 140, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 18, 135, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 22, 140, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 22, 57, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 75, 135, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 22, 93, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 22, 10, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 18, 15, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 22, 10, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, 22, 30, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, 22, 120, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);

         AIGroup := Actions.GiveGroup(5, 22, 145, 30, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, 22, 145, 120, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);

         AIGroup := Actions.GiveGroup(6, 22, 30, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, 22, 120, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, 22, 5, 30, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, 22, 5, 120, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
 
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 75, 15, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 18, 135, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 75, 135, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 18, 15, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToUp(10 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)] - 1, 40, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)] - 1, 110, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 15, 3, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)] - 1, 145, 40, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)] - 1, 145, 110, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 15, 5, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)] - 1, 40, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)] - 1, 110, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 135, 7, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)] - 1, 5, 40, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)] - 1, 5, 110, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 135, 1, 8, 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    27: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 20 + 5 * Q);

         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 75, 15, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 18, 135, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 75, 135, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 18, 15, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToUp(15 * DifficultyFactor, 4), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 15, 3, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 40, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 110, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 15, 5, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 135, 7, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 40, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 110, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 135, 1, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    28: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 24 + 6 * Q);

         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 75, 15, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 18, 135, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 75, 135, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 18, 15, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 5, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 15, 3, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 40, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 110, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 15, 5, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 145, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 135, 7, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 40, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 110, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 135, 1, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    29: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 25 + 5 * Q);
         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 75, 15, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 18, 135, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 75, 135, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 18, 15, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 5, 4, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 5, 4, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 15, 3, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 40, 6, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 110, 6, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 15, 5, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 145, 0, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 145, 0, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 135, 7, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 40, 2, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 110, 2, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 135, 1, Utils.RoundToUp(16 * DifficultyFactor, 4), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    30: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 28 + 4 * Q);

         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         Actions.ShowMsg(-1, '<$80>');

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 15, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 75, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 135, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 75, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 5, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 5, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 15, 3, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 40, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 110, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 15, 5, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 145, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 145, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 135, 7, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 40, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 110, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 135, 1, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    31: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 28 + 4 * Q);

         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         Actions.ShowMsg(-1, '<$79>');

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 15, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 75, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 135, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 75, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 5, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 5, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 15, 3, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 40, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 110, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 15, 5, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 145, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 145, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 135, 7, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 40, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 110, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 135, 1, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    32: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 30 + 4 * Q);

         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         Actions.ShowMsg(-1, '<$81>');

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 15, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 75, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 135, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 75, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 5, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 5, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 15, 3, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 40, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 110, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 15, 5, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 145, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 145, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 135, 7, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 40, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 110, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 135, 1, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    33: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 30 + 4 * Q);

         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 15, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 75, 18, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 75, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, 18, 132, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 135, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 75, 132, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 75, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, 18, 18, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 5, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 5, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 16, 16, 3, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, 18, 16, 15, 3, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 40, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 110, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 134, 16, 5, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, 18, 133, 16, 5, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 145, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 145, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 133, 133, 7, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, 18, 134, 133, 7, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 40, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 110, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 17, 133, 1, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, 18, 16, 133, 1, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
       end;

    34: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
           begin
             Actions.GiveWares(I, 7, 30 + 5 * Q);
             Actions.GiveWeapons(I, 24, 25);
             Actions.GiveWeapons(I, 25, 25);
             Actions.GiveWeapons(I, 18, 25);
             Actions.GiveWeapons(I, 19, 25);
           end;

         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;        

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 15, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 75, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 135, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(30 * DifficultyFactor, 5), 10);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 75, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToUp(25 * DifficultyFactor, 5), 5);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 5, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 5, 4, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 15, 3, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 40, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 110, 6, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 15, 5, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 145, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 145, 0, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 135, 7, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 40, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 110, 2, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 135, 1, Utils.RoundToUp(24 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);

         AIGroup := Actions.GiveGroup(4, 18, 75, 18, 4, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 18, 132, 75, 6, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 18, 75, 132, 0, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 18, 18, 75, 2, Utils.RoundToUp(18 * DifficultyFactor, 3), 6);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

       end;

    35: begin

         for I := 0 to 3 do
           if States.PlayerEnabled(I) then
             Actions.GiveWares(I, 7, 30 + 6 * Q);

         if TotalArmyCount <= (MAX_ARMY_COUNT * 4) then
           AddRecruits10;

         if bReinforce then
           GetReinforce;

         if bNewConscription then
           AddRecruits;

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 15, 4, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 15, 4, Utils.RoundToDown(36 * DifficultyFactor, 5), 9);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToDown(45 * DifficultyFactor, 5), 15);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 15, 4, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 57, 6, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToDown(45 * DifficultyFactor, 5), 15);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 75, 6, Utils.RoundToDown(36 * DifficultyFactor, 5), 9);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 93, 6, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 135, 0, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToDown(45 * DifficultyFactor, 5), 15);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 135, 0, Utils.RoundToDown(36 * DifficultyFactor, 5), 9);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 135, 0, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 57, 2, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToDown(45 * DifficultyFactor, 5), 15);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 75, 2, Utils.RoundToDown(36 * DifficultyFactor, 5), 9);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 93, 2, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 5, 4, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 5, 4, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 5, 4, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 5, 4, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 93, 55, 4);
         AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 15, 3, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 58, 55, 4);

         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 30, 6, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 120, 6, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 40, 6, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 145, 110, 6, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 94, 6);
         AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 15, 5, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 58, 6);

         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 30, 145, 0, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 120, 145, 0, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 40, 145, 0, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 57, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 110, 145, 0, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);
         AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 135, 7, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 94, 95, 0);

         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 30, 2, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 120, 2, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 40, 2, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 58, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 5, 110, 2, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);
         AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 135, 1, Utils.RoundToDown(28 * DifficultyFactor, 5), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 94, 2);

         AIGroup := Actions.GiveGroup(4, 18, 75, 18, 4, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

         AIGroup := Actions.GiveGroup(5, 18, 132, 75, 6, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

         AIGroup := Actions.GiveGroup(6, 18, 75, 132, 0, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

         AIGroup := Actions.GiveGroup(7, 18, 18, 75, 2, Utils.RoundToUp(21 * DifficultyFactor, 4), 7);
         Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

       end;
  end;
end;


procedure GetRescue(aPlayer: Integer);
var
  aTypes: array[0..4] of Integer;
  Group: Integer;
begin
  for I := 0 to 4 do
  begin
    aTypes[I] := States.KaMRandomI(8) + 15;
    if aTypes[I] = 15 then
      aTypes[I] := 16;
    if aTypes[I] = 19 then
      aTypes[I] := 20;
    if aTypes[I] = 21 then
      aTypes[I] := 22;
    if aTypes[I] = 18 then
      if States.KaMRandom > 0.35 then
        aTypes[I] := 20;
  end;

  for I := 0 to 4 do
  begin
    Group := Actions.GiveGroup(aPlayer, aTypes[I], RescueSquadPositionX[aPlayer][I], RescueSquadPositionY[aPlayer][I], Direction[aPlayer], States.KaMRandomI(4) + 15, RescueSquadFormation[aPlayer][I]);
    Actions.GroupHungerSet(Group, States.UnitMaxHunger);
  end;
end;


procedure OnPlanRoadPlaced(aIndex, aX, aY: Integer);
var
  aPlayer: Integer;
begin
  Actions.PlanRemove(aIndex, aX, aY);
  if Wave >= RESCUE_WAVE then
  begin
    aPlayer := aIndex;
    if (aX = RescueTileX[aPlayer])
    and (aY = RescueTileY[aPlayer])
    and (RescuesDelay[aPlayer] = 0)
    and (RescuesCount[aPlayer] > 0)
    and (States.StatArmyCount(aPlayer) <= Utils.RoundToUp(RESCUE_ARMY_COUNT / DifficultyFactor, 20))
    and (States.StatUnitTypeCount(aPlayer, 13) <= Utils.RoundToUp(RESCUE_RECRUITS_COUNT / DifficultyFactor, 5)) then
    begin
      GetRescue(aPlayer);
      ShowStatusStart[aIndex] := States.GameTime;
      StatusString[aIndex] := '[$82AD11]<--- <$84>[]'
      RescuesDelay[aPlayer] := Utils.RoundToUp(RESCUE_DELAY * DifficultyFactor, 300);
      RescuesCount[aPlayer] := RescuesCount[aPlayer] - 1;
    end;
  end;
end;


procedure OnPlanFieldPlaced(aIndex, aX, aY: Integer);
var
  Serf: Integer;
begin
  if (Utils.InRangeI(aX, 55, 95))
  and (Utils.InRangeI(aY, 55, 95))
  and not ((Utils.InRangeI(aX, 74, 76))
  and (Utils.InRangeI(aY, 80, 81))) then
    if States.StatUnitTypeCount(aIndex, 0) < START_SERFS then
    begin
      Serf := Actions.GiveUnit(aIndex, 0, aX, aY, 5);
      Actions.UnitHungerSet(Serf, States.UnitMaxHunger);
    end;
  Actions.PlanRemove(aIndex, aX, aY);
end;


procedure OnPlanWinefieldPlaced(aIndex, aX, aY: Integer);
var
  Troops: array of Integer;
begin
  if (DEBUG_MODE)
  and not ((Utils.InRangeI(aX, 74, 76))
  and (aY = 81)) then
  begin
    Troops := States.PlayerGetAllUnits(aIndex);
    for K := 0 to length(Troops) - 1 do
      Actions.UnitHungerSet(Troops[K], States.UnitMaxHunger);
  end;

  if (Utils.InRangeI(aX, 74, 76))
  and (aY = 81)
  and (LateBonusDelay = 0) then
  begin
    case States.MapTileObject(aX, aY - 1) of
      8:   UseLateBonus(lbWall, aIndex);
      21:  UseLateBonus(lbPoison, aIndex);
      60:  UseLateBonus(lbMoat, aIndex);
      220: UseLateBonus(lbDrought, aIndex);
    end;
    Actions.MapTileObjectSet(aX, aY - 1, 255);
    LateBonusDelay := LATE_BONUS_DELAY;
  end;

  Actions.PlanRemove(aIndex, aX, aY);
end;


procedure OnHousePlanPlaced(P, X, Y, HT: Integer);
begin

  Actions.PlanRemove(P, X, Y);

  if HT = 17 then
  begin
    if States.StatHouseTypeCount(P, 17) >= MAX_TOWERS + Byte(States.MissionDifficulty = mdEasy1) then
      Actions.ShowMsg(P, '<$92>');

    if (States.StatHouseTypeCount(P, 17) < MAX_TOWERS + Byte(States.MissionDifficulty = mdEasy1))
    and (Utils.InRangeI(X, 46, 105))
    and (Utils.InRangeI(Y, 46, 105))
    and not ((Utils.InRangeI(X, 74, 76))
    and (Utils.InRangeI(Y, 80, 81))) then
    begin
      Actions.GiveHouse(P, 17, X, Y);
      Actions.PlanConnectRoad(P, X, Y + 1, States.HousePositionX(States.ClosestHouse(P, X, Y, 11)), States.HousePositionY(States.ClosestHouse(P, X, Y, 11)) + 1, True);
    end;

  end;

end;


procedure CheckRescueDelay;
begin
  for I := 0 to 3 do
  begin
    if RescuesDelay[I] > 0 then
      RescuesDelay[I] := RescuesDelay[I] - 1;
    if RescuesCount[I] = 0 then
      RescuesDelay[I] := 0;
  end;
end;


procedure StopBonus;
var
  X, Y: Integer;
begin

  for X := 56 to 95 do
  for Y := 46 to 51 do
    RegenTile(X, Y);

  for X := 100 to 105 do
  for Y := 56 to 95 do
    RegenTile(X, Y);

  for X := 56 to 95 do
  for Y := 100 to 105 do
    RegenTile(X, Y);

  for X := 46 to 51 do
  for Y := 56 to 95 do
    RegenTile(X, Y);

  for X := 79 to 81 do
  for Y := 75 to 80 do
    RegenTile(X, Y);

end;


procedure CheckLateBonusDelay;
begin
  if LateBonusDelay > 0 then
    LateBonusDelay := LateBonusDelay - 1;

  if LateBonusDelay = 1 then
    StopBonus;
end;


procedure GetLateBonus;
var
  X: Integer;
begin
  for X := 74 to 76 do
    if States.UnitAt(X, 80) <> - 1 then
      Actions.UnitKill(States.UnitAt(X, 80), False);

  Actions.MapTileObjectSet(74, 80, 60);
  Actions.MapTileObjectSet(75, 80, 8);
  if States.KaMRandom < 0.5 then
    Actions.MapTileObjectSet(76, 80, 21)
  else
    Actions.MapTileObjectSet(76, 80, 220);

  Actions.ShowMsgFormatted(-1, '<$61>', [LateBonusName(74, 80), LateBonusName(75, 80), LateBonusName(76, 80)]);
  Actions.ShowMsgGoTo(-1, 74, 80, LateBonusDescription(74, 80));
  Actions.ShowMsgGoTo(-1, 75, 80, LateBonusDescription(75, 80));
  Actions.ShowMsgGoTo(-1, 76, 80, LateBonusDescription(76, 80));
  LateBonusCheck := True;

end;


procedure GetLateBonusNames;
begin
  for I := 0 to 2 do
    LateBonusHeaderName[I] := LateBonusName(74 + I, 80);
end;


procedure CheckRescueColor(aPlayer: Integer);
begin
  if (States.StatArmyCount(aPlayer) <= Utils.RoundToUp(RESCUE_ARMY_COUNT / DifficultyFactor, 20))
  and (States.StatUnitTypeCount(aPlayer, 13) <= Utils.RoundToUp(RESCUE_RECRUITS_COUNT / DifficultyFactor, 5))
  and (RescuesCount[aPlayer] > 0)
  and (RescuesDelay[aPlayer] = 0) then
    RescueColor[aPlayer] := '00FF00'
  else
    RescueColor[aPlayer] := '0000FF';
end;


procedure RescueSquadReminder;
begin
  for I := 0 to 3 do
    if States.PlayerEnabled(I) then
      if (States.StatArmyCount(I) <= Utils.RoundToUp(RESCUE_ARMY_COUNT / DifficultyFactor, 20))
      and (States.StatUnitTypeCount(I, 13) <= Utils.RoundToUp(RESCUE_RECRUITS_COUNT / DifficultyFactor, 5))
      and (RescuesCount[I] > 0)
      and (RescuesDelay[I] = 0)
      and (not States.PlayerDefeated(I)) then
        Actions.ShowMsgGoTo(I, RescueTileX[I], RescueTileY[I], '<$72>');
end;


procedure SortScores;
var
  Temp: Integer;
begin

  if Length(ActivePlayers) <= 0 then
    Exit;

  for I := Length(ActivePlayers) - 1 downto 1 do
  begin
    if Scores[SortedPlayers[I]] > Scores[SortedPlayers[I - 1]] then
    begin
      Temp := SortedPlayers[I - 1];
      SortedPlayers[I - 1] := SortedPlayers[I];
      SortedPlayers[I] := Temp;
    end;
  end;

end;


procedure GetAmbushTroops;
begin

  AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
  Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
  AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 15, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
  Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
  AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 10, 4, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
  Actions.GroupOrderWalk(AIGroup, 75, 55, 4);
  AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 10, 4, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
  Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

  AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 57, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
  Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
  AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
  Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
  AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 135, 75, 6, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
  Actions.GroupOrderWalk(AIGroup, 95, 75, 6);
  AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 140, 93, 6, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
  Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

  AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 57, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
  Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
  AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 140, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
  Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
  AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 75, 135, 0, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
  Actions.GroupOrderWalk(AIGroup, 75, 95, 0);
  AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 93, 140, 0, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
  Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

  AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 57, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
  Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
  AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
  Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
  AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 15, 75, 2, Utils.RoundToUp(12 * DifficultyFactor, 3), 4);
  Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
  AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 10, 93, 2, Utils.RoundToUp(20 * DifficultyFactor, 5), 5);
  Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

  if Wave = 35 then
  begin
    AIGroup := Actions.GiveGroup(4, 18, 18, 18, 3, Utils.RoundToUp(25 * DifficultyFactor, 5), 6);
    Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

    AIGroup := Actions.GiveGroup(5, 18, 132, 18, 5, Utils.RoundToUp(25 * DifficultyFactor, 5), 6);
    Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

    AIGroup := Actions.GiveGroup(6, 18, 18, 132, 1, Utils.RoundToUp(25 * DifficultyFactor, 5), 6);
    Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

    AIGroup := Actions.GiveGroup(7, 18, 132, 132, 7, Utils.RoundToUp(25 * DifficultyFactor, 5), 6);
    Actions.GroupOrderWalk(AIGroup, 55, 75, 2);

    AIGroup := Actions.GiveGroup(4, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 19, 18, 3, Utils.RoundToUp(24 * DifficultyFactor, 4), 5);
    Actions.GroupOrderWalk(AIGroup, 75, 55, 4);

    AIGroup := Actions.GiveGroup(5, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 133, 18, 5, Utils.RoundToUp(24 * DifficultyFactor, 4), 5);
    Actions.GroupOrderWalk(AIGroup, 95, 75, 6);

    AIGroup := Actions.GiveGroup(6, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 19, 132, 1, Utils.RoundToUp(24 * DifficultyFactor, 4), 5);
    Actions.GroupOrderWalk(AIGroup, 75, 95, 0);

    AIGroup := Actions.GiveGroup(7, GroupRandomType[States.KaMRandomI(RANDOM_FACTOR)], 133, 132, 7, Utils.RoundToUp(24 * DifficultyFactor, 4), 5);
    Actions.GroupOrderWalk(AIGroup, 55, 75, 2);
  end;

end;


procedure OnTick;
begin

  Actions.OverlayTextSetFormatted(-1, DebugHeader + '<$70> ' + Utils.IfThen(SHOW_MAP_VERSION, MAP_VERSION, '') + '||<$2> ' + IntToStr(Wave) + ' - ' + WaveName + '|<$5>' + '|<$1>', [((WaveTime div 600) mod 60), ((WaveTime div 10) mod 60)]);

  if Length(SortedPlayers) > 0 then
    for I := 0 to Length(SortedPlayers) - 1 do
      Actions.OverlayTextAppendFormatted(-1, '|<$0>' + ' ' + StatusString[SortedPlayers[I]], [States.PlayerColorText(SortedPlayers[I]), States.PlayerName(SortedPlayers[I]), Scores[SortedPlayers[I]]]);

  for I := 0 to 3 do
  begin
    if States.PlayerEnabled(I) then
      if Wave >= RESCUE_WAVE then
        Actions.OverlayTextAppendFormatted(I, '<$50>', [RescueColor[I], RescuesCount[I], ((RescuesDelay[I] div 600) mod 60), ((RescuesDelay[I] div 10) mod 60), States.StatArmyCount(I), RescueArmy[I], States.StatUnitTypeCount(I, 13), RescueRecruits[I]]);
  end;

  if Wave >= LATE_BONUS_WAVE then
    Actions.OverlayTextAppendFormatted(-1, '<$71>', [LateBonusHeaderColor(74, 80), LateBonusHeaderName[0], LateBonusHeaderColor(75, 80), LateBonusHeaderName[1], LateBonusHeaderColor(76, 80), LateBonusHeaderName[2], ((LateBonusDelay div 600) mod 60), ((LateBonusDelay div 10) mod 60)]);

  if (((States.GameTime <= 25200) and (States.GameTime mod START_WAVES_DELAY = 0))
  or ((States.GameTime > 25200) and (States.GameTime <= 36000) and (States.GameTime mod MID_WAVES_DELAY = 0))
  or ((States.GameTime > 36000) and (States.GameTime mod LATE_WAVES_DELAY = 0)))
  and (Wave < MAX_WAVE) then
    GetAttacks;

  if States.GameTime mod 15000 = 0 then
    Actions.UnitHungerSet(General, States.UnitMaxHunger);

  if (Wave >= MAX_WAVE)
  and (States.GameTime > 54200)
  and (States.StatArmyCount(4) + States.StatArmyCount(5) + States.StatArmyCount(6) + States.StatArmyCount(7) = 0) then
    Actions.PlayerWin([0, 1, 2, 3, 8], True);

  if (States.StatArmyCount(8) = 0)
  or (States.StatHouseTypeCount(8, 21) = 0) then
    for I := 0 to 3 do
      if States.PlayerEnabled(I) then
        Actions.PlayerDefeat(I);

  if (States.GameTime = 46800)
  or (States.GameTime = 49200)
  or (States.GameTime = 51600)
  or (States.GameTime = 54000) then
    GetAmbushTroops;

  GetTimer;

  SortScores;

  if States.GameTime mod 100 = 0 then
    ContinueAttack;

  if (States.GameTime mod 15 = 0)
  and (Utils.InRangeI(Wave, 2, 12)) then
    AttackCenter;

  if (Wave = BONUS_WAVE)
  and not (DEBUG_MODE)
  and not (Check) then
  begin
    CheckBonus;
    Check := True;
  end;

  if (Wave = RESCUE_WAVE)
  and not (bRescueMsg) then
  begin
    for I := 0 to 3 do
      if States.PlayerEnabled(I) then
        Actions.ShowMsgGoTo(I, RescueTileX[I], RescueTileY[I], '<$49>');
    bRescueMsg := True;
  end;

  if (Wave >= RESCUE_WAVE)
  and (States.GameTime mod 100 = 0) then
    RescueSquadReminder;

  CheckRescueDelay;

  CheckLateBonusDelay;

  for I := 0 to 8 do
    if States.PlayerEnabled(I) then
      if States.GameTime mod AUTOFEED_TIME = 5 * I then
        AutoFeed(I);

  for I := 0 to 3 do
    if States.PlayerEnabled(I) then
      CheckRescueColor(I);

  if (Wave >= BONUS_WAVE)
  and (DEBUG_MODE) then
    CheckDebugBonus;

  if States.GameTime mod 101 = 0 then
    CheckIdleGroups;

  if (Wave = LATE_BONUS_WAVE)
  and not (LateBonusCheck) then
  begin
    GetLateBonus;
    GetLateBonusNames;
  end;

  if (Wave >= LATE_BONUS_WAVE)
  and (States.GameTime mod 3 = 0) then
    ReCheckTiles;

  if States.GameTime = 100 then
    Actions.ShowMsgFormatted(-1, '<$93>', [States.UnitTypeName(19), Utils.RoundToUp(LANCE_POINTS * DifficultyFactor * ArmyFactor, 10),
    States.UnitTypeName(15), Utils.RoundToUp(AXE_POINTS * DifficultyFactor * ArmyFactor, 10),
    States.UnitTypeName(17), Utils.RoundToUp(BOW_POINTS * DifficultyFactor * ArmyFactor, 10),
    States.UnitTypeName(18), Utils.RoundToUp(CROSSBOW_POINTS * DifficultyFactor * ArmyFactor, 10),    
    States.UnitTypeName(20), Utils.RoundToUp(PIKE_POINTS * DifficultyFactor * ArmyFactor, 10),
    States.UnitTypeName(21), Utils.RoundToUp(SCOUT_POINTS * DifficultyFactor * ArmyFactor, 10),
    States.UnitTypeName(16), Utils.RoundToDown(SWORD_POINTS * DifficultyFactor * ArmyFactor, 10),
    States.UnitTypeName(23), Utils.RoundToDown(BARB_POINTS * DifficultyFactor * ArmyFactor, 20),
    States.UnitTypeName(22), Utils.RoundToUp(KNIGHT_POINTS * DifficultyFactor * ArmyFactor, 25)]);

  if States.GameTime = 200 then
    Actions.ShowMsg(-1, '<$73>');

  if States.GameTime = 600 then
    Actions.ShowMsg(-1, '<$74>');

  for I := 0 to 3 do
    if States.GameTime - ShowStatusStart[I] >= STATUS_SHOW_TIME then
      StatusString[I] := '';

  if (States.GameTime mod (1 + SPLIT_CHECK_FACTOR) = 0)
  and (not ALLOW_SPLITTING) then
    for I := 0 to 3 do
      CheckSplittedGroups(I);

end;